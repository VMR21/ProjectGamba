{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Enhanced BonusHunter App\n\n## Project Overview\nA comprehensive bonus hunting platform for slot machine enthusiasts and streamers with real-time tracking, admin authentication, gameplay functionality, and OBS integration. Built with modern React + PostgreSQL architecture.\n\n## Key Features\n- **Admin Authentication**: Secure API key-based login/logout system with session management\n- **Real-time Hunt Tracking**: Live bonus hunt progress with payout recording\n- **Gameplay Functionality**: \"Start Playing\" feature with multiplier calculation and win tracking\n- **Multi-currency Support**: USD, CAD, AUD with proper formatting\n- **OBS Overlay Integration**: Protected admin-only overlays for streaming\n- **Comprehensive Slot Database**: 3,376+ slots with images and provider information\n- **Public Hunt Sharing**: Shareable links for hunt viewing\n- **Dark Theme UI**: Modern card-based design with responsive layout\n\n## Tech Stack\n- **Backend**: Node.js + Express + PostgreSQL + Drizzle ORM\n- **Frontend**: React + TypeScript + Tailwind CSS + shadcn/ui\n- **Database**: PostgreSQL with comprehensive schema\n- **Authentication**: JWT-based admin sessions with Bearer token security\n\n## Project Architecture\n```\n.\n├── server/\n│   ├── index.ts           # Express server entry point\n│   ├── routes.ts          # API routes with admin protection\n│   ├── auth.ts            # Admin authentication middleware\n│   ├── storage.ts         # Database storage layer\n│   └── db.ts              # PostgreSQL connection\n├── client/src/\n│   ├── components/        # React components\n│   │   ├── admin-login-modal.tsx\n│   │   ├── start-playing-button.tsx\n│   │   └── navigation.tsx\n│   ├── hooks/\n│   │   ├── use-admin.ts   # Admin authentication hook\n│   │   └── use-hunts.ts   # Hunt data hooks\n│   └── pages/             # Application pages\n└── shared/\n    └── schema.ts          # Drizzle database schema\n```\n\n## Database Schema\n- **hunts**: Hunt metadata with gameplay state (isPlaying, currentSlotIndex)\n- **bonuses**: Bonus entries with payout tracking (isPlayed, winAmount, multiplier)\n- **slotDatabase**: 3,376+ slots with images and provider data\n- **adminSessions**: Secure session management for admin users\n- **meta**: Key-value store for application state\n\n## User Preferences\n- Dark theme with modern card-based UI\n- Currency formatting using Intl API\n- Real-time progress tracking\n- OBS integration for streaming\n\n## Key Features Available to All Users\n- **Hunt Management**: Create, edit, and delete bonus hunts\n- **Gameplay Control**: Start playing sessions and record payouts\n- **Payout Recording**: Click bonuses to input win amounts with automatic multiplier calculation\n- **OBS Overlay Access**: Streaming overlay URLs accessible to all\n- **Edit Functionality**: Edit bet amounts and hunt details without restrictions\n\n## Recent Changes\n- **Database Migration**: Migrated from SQLite to PostgreSQL for enhanced performance (Jan 2025)\n- **Admin Authentication Removal**: Removed admin authentication system in favor of existing login system (Aug 2025)\n- **Public API Access**: Made all functionality accessible without admin requirements (Aug 2025)\n- **UI Enhancement**: Removed total cost display from hunt page and OBS view as requested (Aug 2025)\n- **Live OBS Overlay**: Added new scrolling bonuses overlay with images and next bonus highlighting (Aug 2025)\n- **Hunt Status Management**: Implemented automatic status changes - \"collecting\" → \"playing\" → \"completed\" (Aug 2025)\n- **Payout Recording**: Enhanced with total payout display and real-time updates (Aug 2025)\n- **Bug Fixes**: Fixed slot image display by correcting CSV field mapping from \"image\" to \"imageUrl\" (Aug 2025)\n- **Button Functionality**: All buttons now have proper URL/API functionality without admin restrictions (Aug 2025)\n- **Gameplay Functionality**: Added \"Start Playing\" with payout recording and multiplier calculation\n- **Slot Database**: Imported 3,376 slots with complete metadata and real image URLs\n- **Backwards Compatibility**: Admin routes still available for legacy support\n\n## Environment Variables\n- `ADMIN_KEY`: Required for admin authentication\n- `DATABASE_URL`: PostgreSQL connection string\n- `SESSION_SECRET`: JWT session signing key","size_bytes":4376},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // BonusHunter specific colors\n        dark: \"var(--dark)\",\n        \"dark-purple\": \"var(--dark-purple)\",\n        \"medium-purple\": \"var(--medium-purple)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2957},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/import-slots.js":{"content":"import fs from 'fs';\nimport { parse } from 'csv-parse/sync';\nimport { db } from '../server/db.js';\nimport { slotDatabase } from '../shared/schema.js';\n\nasync function importSlots() {\n  try {\n    // Read and parse the CSV file\n    const csvData = fs.readFileSync('attached_assets/slots_1756197328567.csv', 'utf8');\n    const slots = parse(csvData, { \n      columns: true, \n      skip_empty_lines: true \n    });\n\n    console.log(`Found ${slots.length} slots to import`);\n\n    // Clear existing slots\n    await db.delete(slotDatabase);\n    console.log('Cleared existing slots');\n\n    // Transform and insert slots in batches\n    const batchSize = 100;\n    let imported = 0;\n\n    for (let i = 0; i < slots.length; i += batchSize) {\n      const batch = slots.slice(i, i + batchSize).map(slot => ({\n        name: slot.name || slot.Name || '',\n        provider: slot.provider || slot.Provider || '',\n        imageUrl: slot.image_url || slot.imageUrl || slot['Image URL'] || null,\n        category: slot.category || slot.Category || null,\n      })).filter(slot => slot.name && slot.provider);\n\n      if (batch.length > 0) {\n        await db.insert(slotDatabase).values(batch);\n        imported += batch.length;\n        console.log(`Imported ${imported}/${slots.length} slots`);\n      }\n    }\n\n    console.log(`Successfully imported ${imported} slots`);\n    process.exit(0);\n  } catch (error) {\n    console.error('Error importing slots:', error);\n    process.exit(1);\n  }\n}\n\nimportSlots();","size_bytes":1480},"server/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { adminSessions } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, gt } from \"drizzle-orm\";\nimport crypto from \"crypto\";\n\nexport interface AuthenticatedRequest extends Request {\n  isAdmin?: boolean;\n  sessionToken?: string;\n}\n\n// Admin authentication middleware\nexport async function requireAdmin(\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ error: \"Admin authentication required\" });\n    }\n\n    const sessionToken = authHeader.substring(7);\n    \n    // Check if session token exists and is not expired\n    const session = await db\n      .select()\n      .from(adminSessions)\n      .where(eq(adminSessions.sessionToken, sessionToken))\n      .limit(1);\n\n    if (session.length === 0) {\n      return res.status(401).json({ error: \"Invalid or expired session\" });\n    }\n\n    const sessionData = session[0];\n    \n    // Check if session is expired\n    if (new Date() > sessionData.expiresAt) {\n      // Clean up expired session\n      await db\n        .delete(adminSessions)\n        .where(eq(adminSessions.sessionToken, sessionToken));\n      \n      return res.status(401).json({ error: \"Session expired\" });\n    }\n\n    req.isAdmin = true;\n    req.sessionToken = sessionToken;\n    next();\n  } catch (error) {\n    console.error('Admin auth error:', error);\n    res.status(500).json({ error: \"Authentication failed\" });\n  }\n}\n\n// Create admin session\nexport async function createAdminSession(adminKey: string): Promise<string | null> {\n  // Verify admin key\n  if (adminKey !== process.env.ADMIN_KEY) {\n    return null;\n  }\n\n  // Generate session token\n  const sessionToken = crypto.randomUUID();\n  \n  // Set expiration to 24 hours\n  const expiresAt = new Date();\n  expiresAt.setHours(expiresAt.getHours() + 24);\n\n  // Clean up old sessions (optional - keeps database tidy)\n  await db\n    .delete(adminSessions)\n    .where(gt(adminSessions.expiresAt, new Date()));\n\n  // Create new session\n  await db.insert(adminSessions).values({\n    sessionToken,\n    expiresAt,\n  });\n\n  return sessionToken;\n}\n\n// Check if request has valid admin session\nexport async function checkAdminSession(sessionToken: string): Promise<boolean> {\n  try {\n    const session = await db\n      .select()\n      .from(adminSessions)\n      .where(eq(adminSessions.sessionToken, sessionToken))\n      .limit(1);\n\n    if (session.length === 0) {\n      return false;\n    }\n\n    return new Date() <= session[0].expiresAt;\n  } catch (error) {\n    console.error('Session check error:', error);\n    return false;\n  }\n}","size_bytes":2737},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/hunt-status.ts":{"content":"import { storage } from \"./storage\";\n\nexport async function updateHuntStatus(huntId: string) {\n  const hunt = await storage.getHunt(huntId);\n  if (!hunt) return null;\n\n  const allBonuses = await storage.getBonusesByHuntId(huntId);\n  const totalWon = allBonuses.reduce((sum, b) => sum + (Number(b.winAmount) || 0), 0);\n  const playedBonuses = allBonuses.filter(b => b.isPlayed);\n  const isCompleted = playedBonuses.length === allBonuses.length && allBonuses.length > 0;\n  \n  // Determine new status based on progress\n  let newStatus = hunt.status;\n  if (isCompleted) {\n    newStatus = 'completed';\n  } else if (playedBonuses.length > 0 && hunt.status === 'collecting') {\n    newStatus = 'playing';\n  }\n  \n  return await storage.updateHunt(huntId, {\n    totalWon: totalWon.toString(),\n    status: newStatus\n  });\n}","size_bytes":812},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertHuntSchema, insertBonusSchema, payoutSchema, adminLoginSchema } from \"@shared/schema\";\nimport { requireAdmin, createAdminSession, checkAdminSession, type AuthenticatedRequest } from \"./auth\";\nimport { updateHuntStatus } from \"./hunt-status\";\nimport { randomUUID } from 'crypto';\nimport fs from 'fs';\nimport { parse } from 'csv-parse/sync';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Admin authentication endpoint\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { adminKey } = adminLoginSchema.parse(req.body);\n      const sessionToken = await createAdminSession(adminKey);\n      \n      if (!sessionToken) {\n        return res.status(401).json({ error: \"Invalid admin key\" });\n      }\n\n      res.json({ sessionToken, message: \"Login successful\" });\n    } catch (error) {\n      console.error('Admin login error:', error);\n      res.status(400).json({ error: \"Invalid request\" });\n    }\n  });\n\n  // Check admin session endpoint\n  app.get(\"/api/admin/check\", async (req, res) => {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ isAdmin: false });\n    }\n\n    const sessionToken = authHeader.substring(7);\n    const isValid = await checkAdminSession(sessionToken);\n    \n    res.json({ isAdmin: isValid });\n  });\n\n  // Public routes\n  app.get(\"/api/hunts\", async (req, res) => {\n    try {\n      const hunts = await storage.getHunts();\n      // Add bonus count to each hunt\n      const huntsWithBonusCount = await Promise.all(\n        hunts.map(async (hunt) => {\n          const bonuses = await storage.getBonusesByHuntId(hunt.id);\n          return {\n            ...hunt,\n            bonusCount: bonuses.length\n          };\n        })\n      );\n      res.json(huntsWithBonusCount);\n    } catch (error) {\n      console.error('Error fetching hunts:', error);\n      res.status(500).json({ message: \"Failed to fetch hunts\" });\n    }\n  });\n\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get(\"/api/hunts/:id\", async (req, res) => {\n    try {\n      const hunt = await storage.getHunt(req.params.id);\n      if (!hunt) {\n        return res.status(404).json({ message: \"Hunt not found\" });\n      }\n      res.json(hunt);\n    } catch (error) {\n      console.error('Error fetching hunt:', error);\n      res.status(500).json({ message: \"Failed to fetch hunt\" });\n    }\n  });\n\n  app.get(\"/api/hunts/:id/bonuses\", async (req, res) => {\n    try {\n      const bonuses = await storage.getBonusesByHuntId(req.params.id);\n      res.json(bonuses);\n    } catch (error) {\n      console.error('Error fetching bonuses:', error);\n      res.status(500).json({ message: \"Failed to fetch bonuses\" });\n    }\n  });\n\n  app.get(\"/api/public/hunts/:token\", async (req, res) => {\n    try {\n      const hunt = await storage.getHuntByPublicToken(req.params.token);\n      if (!hunt || !hunt.isPublic) {\n        return res.status(404).json({ message: \"Public hunt not found\" });\n      }\n      \n      const bonuses = await storage.getBonusesByHuntId(hunt.id);\n      res.json({ hunt, bonuses });\n    } catch (error) {\n      console.error('Error fetching public hunt:', error);\n      res.status(500).json({ message: \"Failed to fetch public hunt\" });\n    }\n  });\n\n  app.get(\"/api/slots/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query || query.length < 2) {\n        return res.json([]);\n      }\n      const slots = await storage.searchSlots(query);\n      res.json(slots);\n    } catch (error) {\n      console.error('Error searching slots:', error);\n      res.status(500).json({ message: \"Failed to search slots\" });\n    }\n  });\n\n  app.get(\"/api/latest-hunt\", async (req, res) => {\n    try {\n      const hunt = await storage.getLatestHunt();\n      if (!hunt) {\n        return res.status(404).json({ error: \"No hunts found\" });\n      }\n      res.json({ hunt });\n    } catch (error) {\n      console.error('Error fetching latest hunt:', error);\n      res.status(500).json({ error: \"Failed to fetch latest hunt\" });\n    }\n  });\n\n  app.get(\"/api/latest-hunt/public-link\", async (req, res) => {\n    try {\n      const hunt = await storage.getLatestHunt();\n      if (!hunt) {\n        return res.status(404).json({ error: \"No hunts found\" });\n      }\n\n      // Generate public token if not exists\n      if (!hunt.publicToken) {\n        const publicToken = randomUUID();\n        await storage.updateHunt(hunt.id, { \n          publicToken, \n          isPublic: true \n        });\n        hunt.publicToken = publicToken;\n      }\n\n      res.json({ \n        huntId: hunt.id,\n        publicToken: hunt.publicToken,\n        url: `${req.protocol}://${req.get('host')}/public-hunt/${hunt.publicToken}`,\n        publicUrl: `${req.protocol}://${req.get('host')}/public-hunt/${hunt.publicToken}`,\n        obsUrl: `${req.protocol}://${req.get('host')}/obs-overlay/latest`,\n        liveObsUrl: `${req.protocol}://${req.get('host')}/live-obs-overlay`\n      });\n    } catch (error) {\n      console.error('Error getting public link:', error);\n      res.status(500).json({ error: \"Failed to get public link\" });\n    }\n  });\n\n  // Protected admin routes\n  app.post(\"/api/admin/hunts\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const huntData = insertHuntSchema.parse(req.body);\n      const hunt = await storage.createHunt(huntData);\n      \n      // Generate public token immediately\n      const publicToken = randomUUID();\n      await storage.updateHunt(hunt.id, { \n        publicToken, \n        isPublic: true \n      });\n      \n      // Return hunt with links\n      const response = {\n        ...hunt,\n        publicToken,\n        publicUrl: `${req.protocol}://${req.get('host')}/public-hunt/${publicToken}`,\n        obsUrl: `${req.protocol}://${req.get('host')}/obs-overlay/latest`\n      };\n      \n      res.status(201).json(response);\n    } catch (error) {\n      console.error('Error creating hunt:', error);\n      res.status(400).json({ message: \"Invalid hunt data\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/hunts/:id\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const hunt = await storage.updateHunt(req.params.id, req.body);\n      if (!hunt) {\n        return res.status(404).json({ message: \"Hunt not found\" });\n      }\n      res.json(hunt);\n    } catch (error) {\n      console.error('Error updating hunt:', error);\n      res.status(500).json({ message: \"Failed to update hunt\" });\n    }\n  });\n\n  app.delete(\"/api/admin/hunts/:id\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.deleteHunt(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Hunt not found\" });\n      }\n      res.json({ message: \"Hunt deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting hunt:', error);\n      res.status(500).json({ message: \"Failed to delete hunt\" });\n    }\n  });\n\n  app.post(\"/api/admin/bonuses\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const bonusData = insertBonusSchema.parse(req.body);\n      const bonus = await storage.createBonus(bonusData);\n      res.status(201).json(bonus);\n    } catch (error) {\n      console.error('Error creating bonus:', error);\n      res.status(400).json({ message: \"Invalid bonus data\", error: error.message });\n    }\n  });\n\n  // Update bonus (public access)\n  app.put(\"/api/bonuses/:id\", async (req, res) => {\n    try {\n      const bonus = await storage.updateBonus(req.params.id, req.body);\n      if (!bonus) {\n        return res.status(404).json({ message: \"Bonus not found\" });\n      }\n      res.json(bonus);\n    } catch (error) {\n      console.error('Error updating bonus:', error);\n      res.status(500).json({ message: \"Failed to update bonus\" });\n    }\n  });\n\n  app.put(\"/api/admin/bonuses/:id\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const bonus = await storage.updateBonus(req.params.id, req.body);\n      if (!bonus) {\n        return res.status(404).json({ message: \"Bonus not found\" });\n      }\n      res.json(bonus);\n    } catch (error) {\n      console.error('Error updating bonus:', error);\n      res.status(500).json({ message: \"Failed to update bonus\" });\n    }\n  });\n\n  app.delete(\"/api/admin/bonuses/:id\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.deleteBonus(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Bonus not found\" });\n      }\n      res.json({ message: \"Bonus deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting bonus:', error);\n      res.status(500).json({ message: \"Failed to delete bonus\" });\n    }\n  });\n\n  // Start playing functionality (public access)\n  app.post(\"/api/hunts/:id/start-playing\", async (req, res) => {\n    try {\n      const hunt = await storage.updateHunt(req.params.id, { \n        isPlaying: true,\n        currentSlotIndex: 0,\n        status: 'playing'\n      });\n      if (!hunt) {\n        return res.status(404).json({ message: \"Hunt not found\" });\n      }\n      res.json(hunt);\n    } catch (error) {\n      console.error('Error starting hunt:', error);\n      res.status(500).json({ message: \"Failed to start hunt\" });\n    }\n  });\n\n  // Start playing functionality (admin only - backwards compatibility)\n  app.post(\"/api/admin/hunts/:id/start-playing\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const hunt = await storage.updateHunt(req.params.id, { \n        isPlaying: true,\n        currentSlotIndex: 0,\n        status: 'playing'\n      });\n      if (!hunt) {\n        return res.status(404).json({ message: \"Hunt not found\" });\n      }\n      res.json(hunt);\n    } catch (error) {\n      console.error('Error starting hunt:', error);\n      res.status(500).json({ message: \"Failed to start hunt\" });\n    }\n  });\n\n  // Payout endpoint (public access)\n  app.post(\"/api/bonuses/:id/payout\", async (req, res) => {\n    try {\n      const { winAmount } = payoutSchema.parse(req.body);\n      const bonus = await storage.getBonus(req.params.id);\n      \n      if (!bonus) {\n        return res.status(404).json({ message: \"Bonus not found\" });\n      }\n\n      // Calculate multiplier\n      const betAmount = Number(bonus.betAmount);\n      const multiplier = betAmount > 0 ? winAmount / betAmount : 0;\n\n      const updatedBonus = await storage.updateBonus(req.params.id, {\n        winAmount: winAmount.toString(),\n        multiplier: multiplier.toString(),\n        isPlayed: true\n      });\n\n      // Update hunt totals and status\n      await updateHuntStatus(bonus.huntId);\n\n      res.json(updatedBonus);\n    } catch (error) {\n      console.error('Error processing payout:', error);\n      res.status(400).json({ message: \"Invalid payout data\", error: error.message });\n    }\n  });\n\n  // Payout endpoint (admin only - backwards compatibility)\n  app.post(\"/api/admin/bonuses/:id/payout\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { winAmount } = payoutSchema.parse(req.body);\n      const bonus = await storage.getBonus(req.params.id);\n      \n      if (!bonus) {\n        return res.status(404).json({ message: \"Bonus not found\" });\n      }\n\n      // Calculate multiplier\n      const betAmount = Number(bonus.betAmount);\n      const multiplier = betAmount > 0 ? winAmount / betAmount : 0;\n\n      const updatedBonus = await storage.updateBonus(req.params.id, {\n        winAmount: winAmount.toString(),\n        multiplier: multiplier.toString(),\n        isPlayed: true\n      });\n\n      // Update hunt totals and status\n      await updateHuntStatus(bonus.huntId);\n\n      res.json(updatedBonus);\n    } catch (error) {\n      console.error('Error processing payout:', error);\n      res.status(400).json({ message: \"Invalid payout data\", error: error.message });\n    }\n  });\n\n  // OBS overlay route for latest hunt (public access)\n  app.get(\"/obs-overlay/latest\", async (req, res) => {\n    try {\n      const hunt = await storage.getLatestHunt();\n      if (!hunt) {\n        return res.status(404).json({ message: \"No hunts found\" });\n      }\n      \n      const bonuses = await storage.getBonusesByHuntId(hunt.id);\n      res.json({ hunt, bonuses });\n    } catch (error) {\n      console.error('Error fetching OBS overlay data:', error);\n      res.status(500).json({ message: \"Failed to fetch overlay data\" });\n    }\n  });\n\n  // Protected OBS overlay routes (admin only)\n  app.get(\"/api/admin/obs-overlay/:huntId\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const hunt = await storage.getHunt(req.params.huntId);\n      if (!hunt) {\n        return res.status(404).json({ message: \"Hunt not found\" });\n      }\n      \n      const bonuses = await storage.getBonusesByHuntId(hunt.id);\n      res.json({ hunt, bonuses });\n    } catch (error) {\n      console.error('Error fetching OBS overlay data:', error);\n      res.status(500).json({ message: \"Failed to fetch overlay data\" });\n    }\n  });\n\n  // Initialize slot database if empty\n  app.post(\"/api/admin/init-slots\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Read and parse the CSV file\n      const csvData = fs.readFileSync('attached_assets/slots_1756197328567.csv', 'utf8');\n      const slots = parse(csvData, { \n        columns: true, \n        skip_empty_lines: true \n      });\n\n      const slotData = slots.map(slot => ({\n        name: slot.name || slot.Name || '',\n        provider: slot.provider || slot.Provider || '',\n        imageUrl: slot.image || slot.imageUrl || slot['image_url'] || slot['Image URL'] || null,\n        category: slot.category || slot.Category || null,\n      })).filter(slot => slot.name && slot.provider);\n      \n      console.log('Sample slot data:', slotData.slice(0, 3));\n      console.log(`Parsed ${slotData.length} slots from CSV`);\n\n      // Always re-initialize by clearing first then adding\n      await storage.clearSlots();\n      await storage.bulkCreateSlots(slotData);\n      \n      // Verify slots were added\n      const verifySlots = await storage.searchSlots('');\n      console.log(`Verification: ${verifySlots.length} slots in database`);\n      \n      res.json({ \n        message: \"Slots initialized successfully\", \n        count: verifySlots.length \n      });\n    } catch (error) {\n      console.error('Error initializing slots:', error);\n      res.status(500).json({ message: \"Failed to initialize slots\", error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":14991},"server/storage.ts":{"content":"import { hunts, bonuses, slotDatabase, meta, adminSessions } from \"@shared/schema\";\nimport type { Hunt, InsertHunt, Bonus, InsertBonus, Slot, InsertSlot, Meta, AdminSession } from \"@shared/schema\";\nimport { eq, desc, asc, sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\n\nexport interface IStorage {\n  // Hunts\n  getHunts(): Promise<Hunt[]>;\n  getHunt(id: string): Promise<Hunt | undefined>;\n  getHuntByPublicToken(token: string): Promise<Hunt | undefined>;\n  createHunt(hunt: InsertHunt): Promise<Hunt>;\n  updateHunt(id: string, hunt: Partial<Hunt>): Promise<Hunt | undefined>;\n  deleteHunt(id: string): Promise<boolean>;\n\n  // Bonuses\n  getBonusesByHuntId(huntId: string): Promise<Bonus[]>;\n  getBonus(id: string): Promise<Bonus | undefined>;\n  createBonus(bonus: InsertBonus): Promise<Bonus>;\n  updateBonus(id: string, bonus: Partial<Bonus>): Promise<Bonus | undefined>;\n  deleteBonus(id: string): Promise<boolean>;\n\n  // Slots\n  getSlots(): Promise<Slot[]>;\n  searchSlots(query: string): Promise<Slot[]>;\n  getSlot(id: string): Promise<Slot | undefined>;\n  getSlotByName(name: string): Promise<Slot | undefined>;\n  createSlot(slot: InsertSlot): Promise<Slot>;\n  bulkCreateSlots(slots: InsertSlot[]): Promise<void>;\n  clearSlots(): Promise<void>;\n\n  // Meta\n  getMeta(key: string): Promise<string | undefined>;\n  setMeta(key: string, value: string): Promise<void>;\n\n  // Stats\n  getStats(): Promise<{\n    totalHunts: number;\n    activeHunts: number;\n    totalSpent: number;\n    totalWon: number;\n  }>;\n\n  // Latest hunt\n  getLatestHunt(): Promise<Hunt | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getHunts(): Promise<Hunt[]> {\n    return await db.select().from(hunts).orderBy(desc(hunts.createdAt));\n  }\n\n  async getHunt(id: string): Promise<Hunt | undefined> {\n    const result = await db.select().from(hunts).where(eq(hunts.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getHuntByPublicToken(token: string): Promise<Hunt | undefined> {\n    const result = await db.select().from(hunts).where(eq(hunts.publicToken, token)).limit(1);\n    return result[0];\n  }\n\n  async createHunt(hunt: InsertHunt): Promise<Hunt> {\n    const result = await db.insert(hunts).values(hunt).returning();\n    return result[0];\n  }\n\n  async updateHunt(id: string, hunt: Partial<Hunt>): Promise<Hunt | undefined> {\n    const result = await db\n      .update(hunts)\n      .set({ ...hunt, updatedAt: new Date() })\n      .where(eq(hunts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteHunt(id: string): Promise<boolean> {\n    const result = await db.delete(hunts).where(eq(hunts.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getBonusesByHuntId(huntId: string): Promise<Bonus[]> {\n    return await db\n      .select()\n      .from(bonuses)\n      .where(eq(bonuses.huntId, huntId))\n      .orderBy(asc(bonuses.order));\n  }\n\n  async getBonus(id: string): Promise<Bonus | undefined> {\n    const result = await db.select().from(bonuses).where(eq(bonuses.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createBonus(bonus: InsertBonus): Promise<Bonus> {\n    const result = await db.insert(bonuses).values(bonus).returning();\n    return result[0];\n  }\n\n  async updateBonus(id: string, bonus: Partial<Bonus>): Promise<Bonus | undefined> {\n    const result = await db\n      .update(bonuses)\n      .set(bonus)\n      .where(eq(bonuses.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteBonus(id: string): Promise<boolean> {\n    const result = await db.delete(bonuses).where(eq(bonuses.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getSlots(): Promise<Slot[]> {\n    return await db.select().from(slotDatabase).orderBy(asc(slotDatabase.name));\n  }\n\n  async searchSlots(query: string): Promise<Slot[]> {\n    return await db\n      .select()\n      .from(slotDatabase)\n      .where(sql`LOWER(${slotDatabase.name}) LIKE LOWER(${'%' + query + '%'})`)\n      .orderBy(asc(slotDatabase.name))\n      .limit(50);\n  }\n\n  async getSlot(id: string): Promise<Slot | undefined> {\n    const result = await db.select().from(slotDatabase).where(eq(slotDatabase.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getSlotByName(name: string): Promise<Slot | undefined> {\n    const result = await db.select().from(slotDatabase).where(eq(slotDatabase.name, name)).limit(1);\n    return result[0];\n  }\n\n  async createSlot(slot: InsertSlot): Promise<Slot> {\n    const result = await db.insert(slotDatabase).values(slot).returning();\n    return result[0];\n  }\n\n  async bulkCreateSlots(slots: InsertSlot[]): Promise<void> {\n    if (slots.length === 0) return;\n    \n    // Use batch insert for better performance\n    const batchSize = 100;\n    for (let i = 0; i < slots.length; i += batchSize) {\n      const batch = slots.slice(i, i + batchSize);\n      await db.insert(slotDatabase).values(batch);\n    }\n  }\n\n  async getMeta(key: string): Promise<string | undefined> {\n    const result = await db.select().from(meta).where(eq(meta.key, key)).limit(1);\n    return result[0]?.value;\n  }\n\n  async setMeta(key: string, value: string): Promise<void> {\n    await db\n      .insert(meta)\n      .values({ key, value })\n      .onConflictDoUpdate({\n        target: meta.key,\n        set: { value }\n      });\n  }\n\n  async getStats(): Promise<{\n    totalHunts: number;\n    activeHunts: number;\n    totalSpent: number;\n    totalWon: number;\n  }> {\n    const [totalHuntsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(hunts);\n\n    const [activeHuntsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(hunts)\n      .where(sql`${hunts.status} != 'completed'`);\n\n    const [spentResult] = await db\n      .select({ \n        total: sql<number>`COALESCE(SUM(CAST(${hunts.startBalance} AS NUMERIC) - COALESCE(CAST(${hunts.endBalance} AS NUMERIC), 0)), 0)` \n      })\n      .from(hunts);\n\n    const [wonResult] = await db\n      .select({ \n        total: sql<number>`COALESCE(SUM(CAST(${bonuses.winAmount} AS NUMERIC)), 0)` \n      })\n      .from(bonuses)\n      .where(sql`${bonuses.winAmount} IS NOT NULL`);\n\n    return {\n      totalHunts: totalHuntsResult.count,\n      activeHunts: activeHuntsResult.count,\n      totalSpent: Number(spentResult.total) || 0,\n      totalWon: Number(wonResult.total) || 0,\n    };\n  }\n\n  async getLatestHunt(): Promise<Hunt | undefined> {\n    const result = await db\n      .select()\n      .from(hunts)\n      .orderBy(desc(hunts.createdAt))\n      .limit(1);\n    return result[0];\n  }\n\n  async clearSlots(): Promise<void> {\n    await db.delete(slotDatabase);\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":6610},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, integer, decimal, boolean, timestamp, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const hunts = pgTable(\"hunts\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  title: text(\"title\").notNull(),\n  casino: text(\"casino\").notNull(),\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  startBalance: decimal(\"start_balance\", { precision: 10, scale: 2 }).notNull(),\n  endBalance: decimal(\"end_balance\", { precision: 10, scale: 2 }),\n  status: text(\"status\").notNull().default(\"collecting\"), // collecting, opening, finished\n  notes: text(\"notes\"),\n  isPublic: boolean(\"is_public\").notNull().default(false),\n  publicToken: text(\"public_token\"),\n  isPlaying: boolean(\"is_playing\").default(false),\n  currentSlotIndex: integer(\"current_slot_index\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const bonuses = pgTable(\"bonuses\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  huntId: uuid(\"hunt_id\").notNull().references(() => hunts.id, { onDelete: \"cascade\" }),\n  slotName: text(\"slot_name\").notNull(),\n  provider: text(\"provider\").notNull(),\n  imageUrl: text(\"image_url\"),\n  betAmount: decimal(\"bet_amount\", { precision: 10, scale: 2 }).notNull(),\n  multiplier: decimal(\"multiplier\", { precision: 10, scale: 2 }),\n  winAmount: decimal(\"win_amount\", { precision: 10, scale: 2 }),\n  order: integer(\"order\").notNull(),\n  status: text(\"status\").notNull().default(\"waiting\"), // waiting, opened\n  isPlayed: boolean(\"is_played\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const slotDatabase = pgTable(\"slot_database\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull(),\n  provider: text(\"provider\").notNull(),\n  imageUrl: text(\"image_url\"),\n  category: text(\"category\"),\n});\n\nexport const meta = pgTable(\"meta\", {\n  key: text(\"key\").primaryKey(),\n  value: text(\"value\"),\n});\n\nexport const adminSessions = pgTable(\"admin_sessions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  sessionToken: text(\"session_token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertHuntSchema = createInsertSchema(hunts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  publicToken: true,\n});\n\nexport const insertBonusSchema = createInsertSchema(bonuses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSlotSchema = createInsertSchema(slotDatabase).omit({\n  id: true,\n});\n\nexport const payoutSchema = z.object({\n  winAmount: z.number().min(0),\n});\n\nexport const adminLoginSchema = z.object({\n  adminKey: z.string().min(1),\n});\n\nexport type InsertHunt = z.infer<typeof insertHuntSchema>;\nexport type Hunt = typeof hunts.$inferSelect;\nexport type HuntWithBonusCount = Hunt & { bonusCount: number };\nexport type InsertBonus = z.infer<typeof insertBonusSchema>;\nexport type Bonus = typeof bonuses.$inferSelect;\nexport type InsertSlot = z.infer<typeof insertSlotSchema>;\nexport type Slot = typeof slotDatabase.$inferSelect;\nexport type Meta = typeof meta.$inferSelect;\nexport type AdminSession = typeof adminSessions.$inferSelect;\nexport type PayoutInput = z.infer<typeof payoutSchema>;\nexport type AdminLoginInput = z.infer<typeof adminLoginSchema>;\n","size_bytes":3426},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navigation } from \"@/components/navigation\";\nimport HuntsPage from \"@/pages/hunts\";\nimport HuntDetailPage from \"@/pages/hunt-detail\";\nimport AdminPage from \"@/pages/admin\";\nimport OBSOverlayPage from \"@/pages/obs-overlay\";\nimport LiveOBSOverlay from \"@/pages/live-obs-overlay\";\nimport LatestHuntPage from \"@/pages/latest-hunt\";\nimport PublicHuntPage from \"@/pages/public-hunt\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HuntsPage} />\n      <Route path=\"/hunts/:id\" component={HuntDetailPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/obs\" component={OBSOverlayPage} />\n      <Route path=\"/obs-v2\" component={OBSOverlayPage} />\n      <Route path=\"/obs-overlay/:id\" component={LiveOBSOverlay} />\n      <Route path=\"/live-obs-overlay\" component={LiveOBSOverlay} />\n      <Route path=\"/latest-hunt\" component={LatestHuntPage} />\n      <Route path=\"/public/:token\" component={PublicHuntPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-dark text-gray-100\">\n          <Switch>\n            <Route path=\"/obs*\" component={() => <Router />} />\n            <Route path=\"/public*\" component={() => <Router />} />\n            <Route>\n              <Navigation />\n              <Router />\n            </Route>\n          </Switch>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1869},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Scrolling animation for slots */\n.scrolling-slots {\n  animation: subtle-fade-in 0.5s ease-in-out;\n}\n\n.scrolling-slots > div {\n  animation: slide-in 0.4s ease-out forwards;\n  transform: translateX(-20px);\n  opacity: 0;\n}\n\n@keyframes subtle-fade-in {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slide-in {\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n/* Custom scrollbar for slots container */\n.scrolling-slots::-webkit-scrollbar {\n  width: 6px;\n}\n\n.scrolling-slots::-webkit-scrollbar-track {\n  background: rgba(55, 65, 81, 0.3);\n  border-radius: 3px;\n}\n\n.scrolling-slots::-webkit-scrollbar-thumb {\n  background: rgba(147, 51, 234, 0.5);\n  border-radius: 3px;\n}\n\n.scrolling-slots::-webkit-scrollbar-thumb:hover {\n  background: rgba(147, 51, 234, 0.7);\n}\n\n/* OBS Overlay animations */\n@keyframes scroll {\n  0% { \n    transform: translateY(0); \n  }\n  100% { \n    transform: translateY(-50%); \n  }\n}\n\n.animate-scroll {\n  animation: scroll 15s linear infinite;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(248.4 88.2% 59.6%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(277 88.7% 68.2%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(187 71.4% 56.9%);\n  --accent-foreground: hsl(210 25% 7.8431%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(248.4 88.2% 59.6%);\n  --dark: hsl(240 10% 3.9%);\n  --dark-purple: hsl(251 30% 11%);\n  --medium-purple: hsl(255 20% 16%);\n  --chart-1: hsl(248.4 88.2% 59.6%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(248.4 88.2% 59.6%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(187 71.4% 56.9%);\n  --sidebar-accent-foreground: hsl(248.4 88.2% 59.6%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(248.4 88.2% 59.6%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n}\n\n.dark {\n  --background: hsl(240 10% 3.9%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(251 30% 11%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(240 10% 3.9%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(248.4 88.2% 59.6%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(277 88.7% 68.2%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(187 71.4% 56.9%);\n  --accent-foreground: hsl(248.4 88.2% 59.6%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(255 20% 16%);\n  --ring: hsl(248.4 88.2% 59.6%);\n  --dark: hsl(240 10% 3.9%);\n  --dark-purple: hsl(251 30% 11%);\n  --medium-purple: hsl(255 20% 16%);\n  --chart-1: hsl(248.4 88.2% 59.6%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(251 30% 11%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(248.4 88.2% 59.6%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(187 71.4% 56.9%);\n  --sidebar-accent-foreground: hsl(248.4 88.2% 59.6%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(248.4 88.2% 59.6%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-dark text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .bg-dark {\n    background-color: var(--dark);\n  }\n  \n  .bg-dark-purple {\n    background-color: var(--dark-purple);\n  }\n  \n  .bg-medium-purple {\n    background-color: var(--medium-purple);\n  }\n  \n  .text-primary {\n    color: var(--primary);\n  }\n  \n  .text-secondary {\n    color: var(--secondary);\n  }\n  \n  .text-accent {\n    color: var(--accent);\n  }\n  \n  .border-purple-800\\/30 {\n    border-color: hsl(277 88.7% 68.2% / 0.3);\n  }\n}\n","size_bytes":4857},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/add-bonus-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useCreateBonus } from \"@/hooks/use-bonuses\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { searchSlots, getSlotDetails } from \"@/lib/slot-database\";\nimport type { InsertBonus } from \"@shared/schema\";\nimport type { Slot } from \"@shared/schema\";\n\ninterface AddBonusModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  huntId: string;\n  nextOrder: number;\n}\n\nexport function AddBonusModal({ open, onOpenChange, huntId, nextOrder }: AddBonusModalProps) {\n  const [formData, setFormData] = useState<InsertBonus>({\n    huntId,\n    slotName: \"\",\n    provider: \"\",\n    imageUrl: \"\",\n    betAmount: \"0\",\n    order: nextOrder,\n    status: \"waiting\",\n  });\n  \n  const [slotSuggestions, setSlotSuggestions] = useState<Slot[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState<Slot | null>(null);\n\n  const createBonus = useCreateBonus();\n  const { toast } = useToast();\n\n  const handleSlotSearch = async (query: string) => {\n    setFormData({ ...formData, slotName: query });\n    \n    if (query.length >= 2) {\n      const suggestions = await searchSlots(query);\n      setSlotSuggestions(suggestions);\n      setShowSuggestions(true);\n    } else {\n      setSlotSuggestions([]);\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleSlotSelect = async (slot: Slot) => {\n    setSelectedSlot(slot);\n    setFormData({\n      ...formData,\n      slotName: slot.name,\n      provider: slot.provider,\n      imageUrl: slot.imageUrl || \"\",\n    });\n    setShowSuggestions(false);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await createBonus.mutateAsync(formData);\n      toast({\n        title: \"Success\",\n        description: \"Bonus added successfully!\",\n      });\n      onOpenChange(false);\n      setFormData({\n        huntId,\n        slotName: \"\",\n        provider: \"\",\n        imageUrl: \"\",\n        betAmount: \"0\",\n        order: nextOrder + 1,\n        status: \"waiting\",\n      });\n      setSelectedSlot(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add bonus. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setFormData(prev => ({ ...prev, huntId, order: nextOrder }));\n  }, [huntId, nextOrder]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-dark-purple border-purple-800/30 text-white\">\n        <DialogHeader>\n          <DialogTitle>Add Bonus</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"relative\">\n            <Label htmlFor=\"slotName\">Slot Game</Label>\n            <Input\n              id=\"slotName\"\n              value={formData.slotName}\n              onChange={(e) => handleSlotSearch(e.target.value)}\n              placeholder=\"Search slot games...\"\n              required\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n              data-testid=\"input-slot-search\"\n            />\n            {showSuggestions && slotSuggestions.length > 0 && (\n              <div className=\"absolute z-10 w-full mt-1 bg-dark border border-purple-800/30 rounded-lg max-h-40 overflow-y-auto\">\n                {slotSuggestions.map((slot) => (\n                  <button\n                    key={slot.id}\n                    type=\"button\"\n                    onClick={() => handleSlotSelect(slot)}\n                    className=\"w-full px-4 py-2 text-left hover:bg-white/10 flex items-center space-x-3\"\n                    data-testid={`option-slot-${slot.name}`}\n                  >\n                    {slot.imageUrl && (\n                      <img\n                        src={slot.imageUrl}\n                        alt={slot.name}\n                        className=\"w-8 h-10 rounded object-cover\"\n                      />\n                    )}\n                    <div>\n                      <div className=\"text-white text-sm\">{slot.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{slot.provider}</div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"provider\">Provider</Label>\n            <Input\n              id=\"provider\"\n              value={formData.provider}\n              onChange={(e) => setFormData({ ...formData, provider: e.target.value })}\n              placeholder=\"Auto-filled from selection\"\n              className=\"bg-gray-700 text-gray-300\"\n              readOnly\n              data-testid=\"input-provider\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"betAmount\">Bet Amount</Label>\n            <Input\n              id=\"betAmount\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.betAmount}\n              onChange={(e) => setFormData({ ...formData, betAmount: e.target.value })}\n              placeholder=\"0.00\"\n              required\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n              data-testid=\"input-bet-amount\"\n            />\n          </div>\n          \n          <div>\n            <Label>Preview</Label>\n            <div className=\"bg-dark border border-purple-800/30 rounded-lg p-4 flex items-center space-x-3\">\n              <div className=\"w-12 h-16 bg-gray-700 rounded overflow-hidden\">\n                {selectedSlot?.imageUrl ? (\n                  <img\n                    src={selectedSlot.imageUrl}\n                    alt={selectedSlot.name}\n                    className=\"w-full h-full object-cover\"\n                    data-testid=\"img-slot-preview\"\n                  />\n                ) : (\n                  <div \n                    className=\"w-full h-full flex items-center justify-center text-gray-500 text-xs\"\n                    data-testid=\"text-no-preview\"\n                  >\n                    No image\n                  </div>\n                )}\n              </div>\n              <div className=\"flex-1 text-sm text-gray-400\">\n                {selectedSlot ? `${selectedSlot.name} - ${selectedSlot.provider}` : \"Select a slot to see preview\"}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-bonus\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createBonus.isPending}\n              className=\"flex-1 bg-primary hover:bg-primary/90\"\n              data-testid=\"button-add-bonus\"\n            >\n              {createBonus.isPending ? \"Adding...\" : \"Add Bonus\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7351},"client/src/components/admin-login-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAdmin } from \"@/hooks/use-admin\";\nimport { Key, Loader2 } from \"lucide-react\";\n\ninterface AdminLoginModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AdminLoginModal({ open, onOpenChange }: AdminLoginModalProps) {\n  const [adminKey, setAdminKey] = useState(\"\");\n  const { login, isLoggingIn } = useAdmin();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (adminKey.trim()) {\n      login(adminKey.trim());\n      setAdminKey(\"\");\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Key className=\"w-5 h-5 text-primary\" />\n            Admin Login\n          </DialogTitle>\n          <DialogDescription>\n            Enter your admin key to access administrative features.\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"adminKey\">Admin Key</Label>\n            <Input\n              id=\"adminKey\"\n              type=\"password\"\n              placeholder=\"Enter admin key\"\n              value={adminKey}\n              onChange={(e) => setAdminKey(e.target.value)}\n              disabled={isLoggingIn}\n              data-testid=\"input-admin-key\"\n            />\n          </div>\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={isLoggingIn}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!adminKey.trim() || isLoggingIn}\n              data-testid=\"button-login\"\n            >\n              {isLoggingIn ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Logging in...\n                </>\n              ) : (\n                \"Login\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2557},"client/src/components/create-hunt-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useCreateHunt } from \"@/hooks/use-hunts\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { InsertHunt } from \"@shared/schema\";\n\ninterface CreateHuntModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CreateHuntModal({ open, onOpenChange }: CreateHuntModalProps) {\n  const [formData, setFormData] = useState<InsertHunt>({\n    title: \"\",\n    casino: \"\",\n    currency: \"USD\",\n    startBalance: \"0\",\n    status: \"collecting\",\n    notes: \"\",\n    isPublic: false,\n  });\n\n  const createHunt = useCreateHunt();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await createHunt.mutateAsync(formData);\n      toast({\n        title: \"Success\",\n        description: \"Hunt created successfully!\",\n      });\n      onOpenChange(false);\n      setFormData({\n        title: \"\",\n        casino: \"\",\n        currency: \"USD\",\n        startBalance: \"0\",\n        status: \"collecting\",\n        notes: \"\",\n        isPublic: false,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create hunt. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-dark-purple border-purple-800/30 text-white\">\n        <DialogHeader>\n          <DialogTitle>Create New Hunt</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\">Hunt Title</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n              placeholder=\"Enter hunt title\"\n              required\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n              data-testid=\"input-hunt-title\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"casino\">Casino Name</Label>\n            <Input\n              id=\"casino\"\n              value={formData.casino}\n              onChange={(e) => setFormData({ ...formData, casino: e.target.value })}\n              placeholder=\"Enter casino name\"\n              required\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n              data-testid=\"input-casino-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"currency\">Currency</Label>\n            <Select\n              value={formData.currency}\n              onValueChange={(value) => setFormData({ ...formData, currency: value })}\n            >\n              <SelectTrigger className=\"bg-gray-800 border-gray-700 text-white\" data-testid=\"select-currency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-800 border-gray-700\">\n                <SelectItem value=\"USD\" className=\"text-white hover:bg-gray-700\">USD ($)</SelectItem>\n                <SelectItem value=\"CAD\" className=\"text-white hover:bg-gray-700\">CAD (C$)</SelectItem>\n                <SelectItem value=\"AUD\" className=\"text-white hover:bg-gray-700\">AUD (A$)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"startBalance\">Starting Balance</Label>\n            <Input\n              id=\"startBalance\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.startBalance}\n              onChange={(e) => setFormData({ ...formData, startBalance: e.target.value })}\n              placeholder=\"0.00\"\n              required\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n              data-testid=\"input-start-balance\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes || \"\"}\n              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n              placeholder=\"Add any notes about this hunt...\"\n              className=\"h-20 resize-none bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n              data-testid=\"input-notes\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-hunt\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createHunt.isPending}\n              className=\"flex-1 bg-primary hover:bg-primary/90\"\n              data-testid=\"button-create-hunt\"\n            >\n              {createHunt.isPending ? \"Creating...\" : \"Create Hunt\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5563},"client/src/components/hunt-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Clock, DollarSign, Target, TrendingUp, Trash2 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useDeleteHunt } from \"@/hooks/use-hunts\";\nimport { useAdmin } from \"@/hooks/use-admin\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Hunt } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/currency\";\n\ninterface HuntCardProps {\n  hunt: Hunt;\n  bonusCount?: number;\n}\n\nexport function HuntCard({ hunt, bonusCount = 0 }: HuntCardProps) {\n  const { isAdmin } = useAdmin();\n  const deleteHunt = useDeleteHunt();\n  const { toast } = useToast();\n  \n  const statusColors = {\n    collecting: \"bg-blue-500/20 text-blue-400 border-blue-500/30\",\n    opening: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n    finished: \"bg-green-500/20 text-green-400 border-green-500/30\",\n  };\n\n  const timeAgo = new Date(hunt.createdAt).toLocaleDateString();\n\n  const handleDelete = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!confirm(`Are you sure you want to delete \"${hunt.title}\"? This action cannot be undone.`)) {\n      return;\n    }\n\n    try {\n      await deleteHunt.mutateAsync(hunt.id);\n      toast({\n        title: \"Success\",\n        description: \"Hunt deleted successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Failed to delete hunt\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Card className=\"bg-dark-purple/50 border-purple-800/30 hover:bg-white/5 transition-colors\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white mb-1\">{hunt.title}</h3>\n            <p className=\"text-gray-400 text-sm\">{hunt.casino}</p>\n          </div>\n          <Badge className={statusColors[hunt.status as keyof typeof statusColors]}>\n            {hunt.status}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div className=\"flex items-center text-sm\">\n            <Target className=\"w-4 h-4 text-gray-400 mr-2\" />\n            <span className=\"text-gray-400\">Bonuses:</span>\n            <span className=\"text-white ml-1\">{bonusCount}</span>\n          </div>\n          <div className=\"flex items-center text-sm\">\n            <Clock className=\"w-4 h-4 text-gray-400 mr-2\" />\n            <span className=\"text-gray-400\">Created:</span>\n            <span className=\"text-white ml-1\">{timeAgo}</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div className=\"flex items-center text-sm\">\n            <DollarSign className=\"w-4 h-4 text-green-400 mr-2\" />\n            <span className=\"text-gray-400\">Start:</span>\n            <span className=\"text-green-400 ml-1\">\n              {formatCurrency(hunt.startBalance, hunt.currency as any)}\n            </span>\n          </div>\n          {hunt.endBalance && (\n            <div className=\"flex items-center text-sm\">\n              <TrendingUp className=\"w-4 h-4 text-green-400 mr-2\" />\n              <span className=\"text-gray-400\">End:</span>\n              <span className=\"text-green-400 ml-1\">\n                {formatCurrency(hunt.endBalance, hunt.currency as any)}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <Link href={`/hunts/${hunt.id}`} className=\"flex-1\">\n            <button \n              className=\"w-full bg-primary hover:bg-primary/90 text-white py-2 rounded-lg transition-colors text-sm\"\n              data-testid={`button-view-hunt-${hunt.id}`}\n            >\n              View Details\n            </button>\n          </Link>\n\n          {isAdmin && (\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={handleDelete}\n              disabled={deleteHunt.isPending}\n              className=\"px-3\"\n              data-testid={`button-delete-hunt-${hunt.id}`}\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4326},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Dice6, Trophy, Settings, Eye, Key, LogOut } from \"lucide-react\";\nimport { useStats } from \"@/hooks/use-hunts\";\nimport { useAdmin } from \"@/hooks/use-admin\";\nimport { AdminLoginModal } from \"@/components/admin-login-modal\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const { data: stats } = useStats();\n  const { isAdmin, logout } = useAdmin();\n\n  // Only show admin-only routes to authenticated admins\n  const navItems = [\n    { path: \"/\", label: \"Hunts\", icon: Trophy },\n    ...(isAdmin ? [\n      { path: \"/obs\", label: \"OBS Overlay\", icon: Eye },\n    ] : []),\n  ];\n\n  return (\n    <header className=\"bg-dark-purple/80 backdrop-blur-sm border-b border-purple-800/30 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <Dice6 className=\"text-primary text-2xl mr-3\" />\n              <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                BonusHunter Pro\n              </h1>\n            </Link>\n            <nav className=\"hidden md:flex space-x-6\">\n              {navItems.map(({ path, label, icon: Icon }) => (\n                <Link key={path} href={path}>\n                  <button\n                    className={`text-gray-300 hover:text-white transition-colors px-3 py-2 rounded-lg hover:bg-white/10 ${\n                      location === path ? \"bg-primary/20 text-primary\" : \"\"\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4 inline mr-2\" />\n                    {label}\n                  </button>\n                </Link>\n              ))}\n            </nav>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-sm text-gray-400\">\n              <span>{stats?.totalHunts || 0}</span> Hunts Created\n            </div>\n            \n            {isAdmin ? (\n              <>\n                <Link href=\"/admin\">\n                  <button \n                    className=\"bg-primary hover:bg-primary/90 text-white px-4 py-2 rounded-lg transition-colors\"\n                    data-testid=\"button-new-hunt\"\n                  >\n                    <Trophy className=\"w-4 h-4 mr-2 inline\" />\n                    New Hunt\n                  </button>\n                </Link>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={logout}\n                  className=\"text-red-600 hover:text-red-700 border-red-200 hover:border-red-300\"\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Logout\n                </Button>\n              </>\n            ) : (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowLoginModal(true)}\n                className=\"text-primary hover:text-primary/90 border-primary/20 hover:border-primary/30\"\n                data-testid=\"button-admin-login\"\n              >\n                <Key className=\"w-4 h-4 mr-2\" />\n                Admin Login\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      <AdminLoginModal \n        open={showLoginModal} \n        onOpenChange={setShowLoginModal} \n      />\n    </header>\n  );\n}\n","size_bytes":3708},"client/src/components/provider-chart.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport type { Bonus } from \"@shared/schema\";\n\ninterface ProviderChartProps {\n  bonuses: Bonus[];\n}\n\nexport function ProviderChart({ bonuses }: ProviderChartProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || bonuses.length === 0) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Calculate provider distribution\n    const providerCounts = bonuses.reduce((acc, bonus) => {\n      acc[bonus.provider] = (acc[bonus.provider] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const providers = Object.entries(providerCounts).map(([name, count]) => ({\n      name,\n      count,\n      percentage: (count / bonuses.length) * 100,\n    }));\n\n    // Colors for providers\n    const colors = [\n      '#6366F1', // primary\n      '#8B5CF6', // secondary\n      '#06B6D4', // accent\n      '#10B981', // green\n      '#F59E0B', // yellow\n      '#EF4444', // red\n    ];\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = 100;\n    const innerRadius = 60;\n\n    let currentAngle = 0;\n\n    providers.forEach((provider, index) => {\n      const sliceAngle = (provider.percentage / 100) * 2 * Math.PI;\n      const color = colors[index % colors.length];\n\n      // Draw outer arc\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n      ctx.arc(centerX, centerY, innerRadius, currentAngle + sliceAngle, currentAngle, true);\n      ctx.closePath();\n      ctx.fillStyle = color;\n      ctx.fill();\n\n      currentAngle += sliceAngle;\n    });\n\n    // Draw center circle\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, innerRadius, 0, 2 * Math.PI);\n    ctx.fillStyle = '#1E1B4B';\n    ctx.fill();\n\n    // Draw center text\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Inter';\n    ctx.textAlign = 'center';\n    ctx.fillText('Providers', centerX, centerY);\n\n  }, [bonuses]);\n\n  if (bonuses.length === 0) {\n    return (\n      <div className=\"flex justify-center items-center h-80\">\n        <p className=\"text-gray-400\">No bonuses to display</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex justify-center\">\n      <canvas \n        ref={canvasRef} \n        width={300} \n        height={300} \n        className=\"max-w-full\"\n        data-testid=\"canvas-provider-chart\"\n      />\n    </div>\n  );\n}\n","size_bytes":2534},"client/src/components/start-playing-button.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRecordPayout } from \"@/hooks/use-bonuses\";\n\nimport { Play, DollarSign, Calculator, Edit } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport type { Hunt, Bonus } from \"@shared/schema\";\nimport type { Currency } from \"@/lib/currency\";\n\ninterface StartPlayingButtonProps {\n  hunt: Hunt;\n  bonuses: Bonus[];\n}\n\nexport function StartPlayingButton({ hunt, bonuses }: StartPlayingButtonProps) {\n  const [showPayoutModal, setShowPayoutModal] = useState(false);\n  const [showEditBetModal, setShowEditBetModal] = useState(false);\n  const [selectedBonus, setSelectedBonus] = useState<Bonus | null>(null);\n  const [winAmount, setWinAmount] = useState(\"\");\n  const [editBetAmount, setEditBetAmount] = useState(\"\");\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const recordPayout = useRecordPayout();\n\n  // Start playing mutation\n  const startPlayingMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/hunts/${hunt.id}/start-playing`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Failed to start hunt' }));\n        throw new Error(errorData.message || 'Failed to start hunt');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/hunts/${hunt.id}`] });\n      toast({\n        title: \"Hunt Started\",\n        description: \"You can now record payouts for bonuses\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start hunt\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Edit bet amount mutation\n  const editBetMutation = useMutation({\n    mutationFn: async ({ bonusId, betAmount }: { bonusId: string; betAmount: string }) => {\n      const response = await fetch(`/api/bonuses/${bonusId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ betAmount }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Failed to update bet amount' }));\n        throw new Error(errorData.message || 'Failed to update bet amount');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/hunts/${hunt.id}/bonuses`] });\n      setShowEditBetModal(false);\n      setSelectedBonus(null);\n      setEditBetAmount(\"\");\n      toast({\n        title: \"Bet Amount Updated\",\n        description: \"Bonus bet amount has been updated\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update bet amount\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Use the custom payout hook for better tracking\n  const handlePayoutSuccess = () => {\n    setShowPayoutModal(false);\n    setSelectedBonus(null);\n    setWinAmount(\"\");\n    toast({\n      title: \"Payout Recorded\",\n      description: \"Bonus payout and multiplier have been calculated\",\n      variant: \"default\",\n    });\n  };\n\n  const handlePayoutError = (error: any) => {\n    toast({\n      title: \"Error\",\n      description: error.message || \"Failed to record payout\",\n      variant: \"destructive\",\n    });\n  };\n\n  const handleBonusClick = (bonus: Bonus) => {\n    if (hunt.isPlaying && !bonus.isPlayed) {\n      setSelectedBonus(bonus);\n      setWinAmount(\"\");\n      setShowPayoutModal(true);\n    }\n  };\n\n  const handleEditBet = (bonus: Bonus) => {\n    setSelectedBonus(bonus);\n    setEditBetAmount(bonus.betAmount);\n    setShowEditBetModal(true);\n  };\n\n  const handleEditBetSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedBonus && editBetAmount) {\n      editBetMutation.mutate({\n        bonusId: selectedBonus.id,\n        betAmount: editBetAmount,\n      });\n    }\n  };\n\n  const handlePayoutSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedBonus && winAmount) {\n      const amount = parseFloat(winAmount);\n      if (amount >= 0) {\n        recordPayout.mutate({\n          bonusId: selectedBonus.id,\n          winAmount: amount,\n          huntId: hunt.id,\n        }, {\n          onSuccess: handlePayoutSuccess,\n          onError: handlePayoutError,\n        });\n      }\n    }\n  };\n\n  const calculateMultiplier = () => {\n    if (selectedBonus && winAmount) {\n      const betAmount = Number(selectedBonus.betAmount);\n      const amount = parseFloat(winAmount);\n      return betAmount > 0 ? (amount / betAmount).toFixed(2) : \"0.00\";\n    }\n    return \"0.00\";\n  };\n\n  const nextUnplayedBonus = bonuses.find(b => !b.isPlayed);\n\n  return (\n    <>\n      {!hunt.isPlaying ? (\n        <div className=\"space-y-2\">\n          <Button\n            onClick={() => startPlayingMutation.mutate()}\n            disabled={startPlayingMutation.isPending || bonuses.length === 0}\n            className=\"bg-green-600 hover:bg-green-700 text-white\"\n            data-testid=\"button-start-playing\"\n          >\n            <Play className=\"w-4 h-4 mr-2\" />\n            Start Playing\n          </Button>\n          {bonuses.length > 0 && (\n            <p className=\"text-sm text-gray-400\">\n              You can edit bet amounts before starting\n            </p>\n          )}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 text-green-700 dark:text-green-300\">\n              <Play className=\"w-4 h-4\" />\n              <span className=\"font-semibold\">Hunt is Active</span>\n            </div>\n            <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\n              Click on bonuses below to record payouts and calculate multipliers\n            </p>\n          </div>\n\n          {nextUnplayedBonus && (\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 text-blue-700 dark:text-blue-300\">\n                <DollarSign className=\"w-4 h-4\" />\n                <span className=\"font-semibold\">Next Bonus</span>\n              </div>\n              <p className=\"text-sm text-blue-600 dark:text-blue-400 mt-1\">\n                {nextUnplayedBonus.slotName} - ${Number(nextUnplayedBonus.betAmount).toFixed(2)} bet\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Payout Modal */}\n      <Dialog open={showPayoutModal} onOpenChange={setShowPayoutModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"w-5 h-5 text-green-600\" />\n              Record Payout\n            </DialogTitle>\n            <DialogDescription>\n              Enter the win amount for {selectedBonus?.slotName}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handlePayoutSubmit} className=\"space-y-4\">\n            {selectedBonus && (\n              <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-3 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Slot:</span>\n                  <span className=\"font-medium\">{selectedBonus.slotName}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Bet Amount:</span>\n                  <span className=\"font-medium\">${Number(selectedBonus.betAmount).toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Provider:</span>\n                  <span className=\"font-medium\">{selectedBonus.provider}</span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"winAmount\">Win Amount ($)</Label>\n              <Input\n                id=\"winAmount\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                placeholder=\"0.00\"\n                value={winAmount}\n                onChange={(e) => setWinAmount(e.target.value)}\n                disabled={recordPayout.isPending}\n                data-testid=\"input-win-amount\"\n              />\n            </div>\n\n            {winAmount && (\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                <div className=\"flex items-center gap-2 text-blue-700 dark:text-blue-300\">\n                  <Calculator className=\"w-4 h-4\" />\n                  <span className=\"font-medium\">Calculated Multiplier: {calculateMultiplier()}x</span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowPayoutModal(false)}\n                disabled={recordPayout.isPending}\n                data-testid=\"button-cancel-payout\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={!winAmount || recordPayout.isPending}\n                data-testid=\"button-submit-payout\"\n              >\n                {recordPayout.isPending ? \"Recording...\" : \"Record Payout\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Bet Modal */}\n      <Dialog open={showEditBetModal} onOpenChange={setShowEditBetModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Edit className=\"w-5 h-5 text-blue-600\" />\n              Edit Bet Amount\n            </DialogTitle>\n            <DialogDescription>\n              Update the bet amount for {selectedBonus?.slotName}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleEditBetSubmit} className=\"space-y-4\">\n            {selectedBonus && (\n              <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-3 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Slot:</span>\n                  <span className=\"font-medium\">{selectedBonus.slotName}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Provider:</span>\n                  <span className=\"font-medium\">{selectedBonus.provider}</span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"editBetAmount\">Bet Amount ({hunt.currency})</Label>\n              <Input\n                id=\"editBetAmount\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                placeholder=\"0.00\"\n                value={editBetAmount}\n                onChange={(e) => setEditBetAmount(e.target.value)}\n                disabled={editBetMutation.isPending}\n                data-testid=\"input-edit-bet-amount\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowEditBetModal(false)}\n                disabled={editBetMutation.isPending}\n                data-testid=\"button-cancel-edit-bet\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={!editBetAmount || editBetMutation.isPending}\n                data-testid=\"button-update-bet\"\n              >\n                {editBetMutation.isPending ? \"Updating...\" : \"Update Bet\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\n// Export components and functions for use in other components  \nexport { StartPlayingButton as default, type StartPlayingButtonProps };\nexport type { Hunt, Bonus } from \"@shared/schema\";","size_bytes":13076},"client/src/hooks/use-admin.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\n// Admin authentication hook\nexport function useAdmin() {\n  const [sessionToken, setSessionToken] = useState<string | null>(\n    localStorage.getItem('admin_session_token')\n  );\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check admin session\n  const { data: adminCheck, isLoading } = useQuery({\n    queryKey: ['/api/admin/check'],\n    enabled: !!sessionToken,\n    retry: false,\n    queryFn: async () => {\n      if (!sessionToken) {\n        throw new Error('No session token');\n      }\n      const response = await fetch('/api/admin/check', {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Session check failed');\n      }\n      return response.json();\n    },\n  });\n\n  const isAdmin = adminCheck?.isAdmin || false;\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (adminKey: string) => {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ adminKey }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Login failed' }));\n        throw new Error(errorData.error || 'Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      const token = data.sessionToken;\n      setSessionToken(token);\n      localStorage.setItem('admin_session_token', token);\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/check'] });\n      toast({\n        title: \"Login Successful\",\n        description: \"You are now logged in as admin\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid admin key\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Logout function\n  const logout = () => {\n    setSessionToken(null);\n    localStorage.removeItem('admin_session_token');\n    queryClient.clear();\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been logged out\",\n      variant: \"default\",\n    });\n  };\n\n  // Auto-logout on session expiry\n  useEffect(() => {\n    if (sessionToken && adminCheck && !adminCheck.isAdmin) {\n      logout();\n    }\n  }, [sessionToken, adminCheck]);\n\n  return {\n    isAdmin,\n    isLoading,\n    sessionToken,\n    login: loginMutation.mutate,\n    logout,\n    isLoggingIn: loginMutation.isPending,\n  };\n}\n\n// Hook for making authenticated admin requests\nexport function useAdminRequest() {\n  const { sessionToken } = useAdmin();\n\n  return {\n    request: async (url: string, options: any = {}) => {\n      if (!sessionToken) {\n        throw new Error('Not authenticated as admin');\n      }\n\n      return apiRequest(url, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'Authorization': `Bearer ${sessionToken}`,\n        },\n      });\n    },\n    sessionToken,\n  };\n}","size_bytes":3270},"client/src/hooks/use-bonuses.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Bonus, InsertBonus } from \"@shared/schema\";\n\nexport function useBonuses(huntId: string) {\n  return useQuery<Bonus[]>({\n    queryKey: [\"/api/hunts\", huntId, \"bonuses\"],\n    enabled: !!huntId,\n  });\n}\n\nexport function useCreateBonus() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (bonus: InsertBonus) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/bonuses\", bonus);\n      return response.json();\n    },\n    onSuccess: (_, { huntId }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\", huntId, \"bonuses\"] });\n    },\n  });\n}\n\nexport function useUpdateBonus() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, huntId, ...data }: { id: string; huntId: string } & Partial<Bonus>) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/bonuses/${id}`, data);\n      return response.json();\n    },\n    onSuccess: (_, { huntId }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\", huntId, \"bonuses\"] });\n    },\n  });\n}\n\nexport function useDeleteBonus() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, huntId }: { id: string; huntId: string }) => {\n      await apiRequest(\"DELETE\", `/api/admin/bonuses/${id}`);\n    },\n    onSuccess: (_, { huntId }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\", huntId, \"bonuses\"] });\n    },\n  });\n}\n\nexport function useRecordPayout() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ bonusId, winAmount, huntId }: { bonusId: string; winAmount: number; huntId: string }) => {\n      const response = await apiRequest(\"POST\", `/api/bonuses/${bonusId}/payout`, { winAmount });\n      return response.json();\n    },\n    onSuccess: (_, { huntId }) => {\n      // Invalidate both bonuses and hunt data to ensure real-time updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\", huntId, \"bonuses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\", huntId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n    },\n  });\n}\n","size_bytes":2294},"client/src/hooks/use-hunts.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Hunt, InsertHunt } from \"@shared/schema\";\n\nexport function useHunts() {\n  return useQuery<Hunt[]>({\n    queryKey: [\"/api/hunts\"],\n  });\n}\n\nexport function useHunt(id: string) {\n  return useQuery<Hunt>({\n    queryKey: [\"/api/hunts\", id],\n    enabled: !!id,\n  });\n}\n\nexport function useCreateHunt() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (hunt: InsertHunt) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/hunts\", hunt);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\"] });\n    },\n  });\n}\n\nexport function useUpdateHunt() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, ...data }: { id: string } & Partial<Hunt>) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/hunts/${id}`, data);\n      return response.json();\n    },\n    onSuccess: (_, { id }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\", id] });\n    },\n  });\n}\n\nexport function useDeleteHunt() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/hunts/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hunts\"] });\n    },\n  });\n}\n\nexport function useStats() {\n  return useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n}\n","size_bytes":1650},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/currency.ts":{"content":"export type Currency = 'USD' | 'CAD' | 'AUD';\n\nexport function formatCurrency(amount: number, currency: Currency = 'USD'): string {\n  const currencyMap = {\n    USD: { locale: 'en-US', currency: 'USD' },\n    CAD: { locale: 'en-CA', currency: 'CAD' },\n    AUD: { locale: 'en-AU', currency: 'AUD' },\n  };\n\n  const config = currencyMap[currency];\n  return new Intl.NumberFormat(config.locale, {\n    style: 'currency',\n    currency: config.currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n}\n\nexport function getCurrencySymbol(currency: Currency): string {\n  const symbols = {\n    USD: '$',\n    CAD: 'C$',\n    AUD: 'A$',\n  };\n  return symbols[currency];\n}\n","size_bytes":692},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  // Add Bearer token for admin routes\n  if (url.includes('/admin/') || url.includes('/api/admin/')) {\n    const sessionToken = localStorage.getItem('admin_session_token');\n    if (sessionToken) {\n      headers['Authorization'] = `Bearer ${sessionToken}`;\n    }\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey.join(\"/\") as string;\n    const headers: Record<string, string> = {};\n    \n    // Add Bearer token for admin routes\n    if (url.includes('/admin/') || url.includes('/api/admin/')) {\n      const sessionToken = localStorage.getItem('admin_session_token');\n      if (sessionToken) {\n        headers['Authorization'] = `Bearer ${sessionToken}`;\n      }\n    }\n\n    const res = await fetch(url, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: 2000, // Refresh every 2 seconds for real-time updates\n      refetchIntervalInBackground: true,\n      refetchOnWindowFocus: true,\n      staleTime: 0, // Always consider data stale for immediate updates\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2198},"client/src/lib/slot-database.ts":{"content":"import type { Slot } from \"@shared/schema\";\n\nexport async function searchSlots(query: string): Promise<Slot[]> {\n  if (!query || query.length < 2) return [];\n  \n  try {\n    const response = await fetch(`/api/slots/search?q=${encodeURIComponent(query)}`);\n    if (!response.ok) throw new Error('Failed to search slots');\n    return await response.json();\n  } catch (error) {\n    console.error('Error searching slots:', error);\n    return [];\n  }\n}\n\nexport async function getSlotDetails(name: string): Promise<Slot | null> {\n  try {\n    const response = await fetch(`/api/slots/${encodeURIComponent(name)}`);\n    if (!response.ok) return null;\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching slot details:', error);\n    return null;\n  }\n}\n","size_bytes":777},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Plus, Play, DollarSign, Settings, Gift } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { CreateHuntModal } from \"@/components/create-hunt-modal\";\nimport { AddBonusModal } from \"@/components/add-bonus-modal\";\nimport { useHunts } from \"@/hooks/use-hunts\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminPage() {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [createHuntModalOpen, setCreateHuntModalOpen] = useState(false);\n  const [addBonusModalOpen, setAddBonusModalOpen] = useState(false);\n  const [selectedHuntId, setSelectedHuntId] = useState(\"\");\n  const [spentAmount, setSpentAmount] = useState(\"\");\n\n  const { data: hunts } = useHunts();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const storedApiKey = localStorage.getItem('bh_api_key');\n    if (storedApiKey) {\n      setApiKey(storedApiKey);\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const authenticateAPI = async () => {\n    try {\n      const response = await fetch('/api/admin/validate-key', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ apiKey }),\n      });\n\n      const data = await response.json();\n      if (data.valid) {\n        localStorage.setItem('bh_api_key', apiKey);\n        setIsAuthenticated(true);\n        toast({\n          title: \"Success\",\n          description: \"API key authenticated successfully!\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Invalid API key. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to authenticate API key.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const updateSpentAmount = async () => {\n    if (!selectedHuntId || !spentAmount) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a hunt and enter an amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/admin/hunts/${selectedHuntId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': apiKey,\n        },\n        body: JSON.stringify({ endBalance: parseFloat(spentAmount) }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Spent amount updated successfully!\",\n        });\n        setSpentAmount(\"\");\n      } else {\n        throw new Error('Failed to update');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update spent amount.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const startOpening = () => {\n    if (!selectedHuntId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a hunt first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    toast({\n      title: \"Info\",\n      description: \"Opening phase started! You can now set payouts for bonuses.\",\n    });\n  };\n\n  const selectedHunt = hunts?.find(h => h.id === selectedHuntId);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <h2 className=\"text-3xl font-bold text-white mb-6\">Admin Panel</h2>\n      \n      {!isAuthenticated ? (\n        <Card className=\"bg-dark-purple/50 border-purple-800/30 mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold text-white\">API Authentication</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex space-x-4\">\n              <Input\n                type=\"password\"\n                placeholder=\"Enter API Key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                className=\"flex-1 bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n                data-testid=\"input-api-key\"\n              />\n              <Button \n                onClick={authenticateAPI}\n                className=\"bg-primary hover:bg-primary/90\"\n                data-testid=\"button-authenticate\"\n              >\n                Authenticate\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          {/* Admin Controls */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Button\n              onClick={() => setCreateHuntModalOpen(true)}\n              className=\"bg-green-600 hover:bg-green-700 text-white p-6 h-auto flex-col\"\n              data-testid=\"button-admin-create-hunt\"\n            >\n              <Plus className=\"text-2xl mb-2\" />\n              <div className=\"font-semibold\">Create Hunt</div>\n            </Button>\n            \n            <Button\n              onClick={() => setAddBonusModalOpen(true)}\n              disabled={!selectedHuntId}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white p-6 h-auto flex-col disabled:opacity-50\"\n              data-testid=\"button-admin-add-bonus\"\n            >\n              <Gift className=\"text-2xl mb-2\" />\n              <div className=\"font-semibold\">Add Bonus</div>\n            </Button>\n            \n            <Button\n              onClick={startOpening}\n              disabled={!selectedHuntId}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white p-6 h-auto flex-col disabled:opacity-50\"\n              data-testid=\"button-start-opening\"\n            >\n              <Play className=\"text-2xl mb-2\" />\n              <div className=\"font-semibold\">Start Opening</div>\n            </Button>\n            \n            <Button\n              onClick={updateSpentAmount}\n              disabled={!selectedHuntId || !spentAmount}\n              className=\"bg-purple-600 hover:bg-purple-700 text-white p-6 h-auto flex-col disabled:opacity-50\"\n              data-testid=\"button-update-spent\"\n            >\n              <DollarSign className=\"text-2xl mb-2\" />\n              <div className=\"font-semibold\">Update Balance</div>\n            </Button>\n          </div>\n\n          {/* Hunt Management */}\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Current Hunt Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"hunt-select\" className=\"block text-gray-400 text-sm font-medium mb-2\">\n                    Select Hunt\n                  </Label>\n                  <Select value={selectedHuntId} onValueChange={setSelectedHuntId}>\n                    <SelectTrigger data-testid=\"select-hunt\">\n                      <SelectValue placeholder=\"Choose a hunt...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {hunts?.map((hunt) => (\n                        <SelectItem key={hunt.id} value={hunt.id}>\n                          {hunt.title} - {hunt.casino}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedHunt && (\n                    <div className=\"mt-2 text-sm text-gray-400\">\n                      Status: <span className=\"text-white\">{selectedHunt.status}</span>\n                    </div>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"spent-amount\" className=\"block text-gray-400 text-sm font-medium mb-2\">\n                    Update End Balance\n                  </Label>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      id=\"spent-amount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"Final balance amount\"\n                      value={spentAmount}\n                      onChange={(e) => setSpentAmount(e.target.value)}\n                      className=\"flex-1\"\n                      data-testid=\"input-end-balance\"\n                    />\n                    <Button \n                      onClick={updateSpentAmount}\n                      disabled={!selectedHuntId || !spentAmount}\n                      className=\"bg-primary hover:bg-primary/90\"\n                      data-testid=\"button-update-balance\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n\n      <CreateHuntModal\n        open={createHuntModalOpen}\n        onOpenChange={setCreateHuntModalOpen}\n      />\n\n      {selectedHuntId && (\n        <AddBonusModal\n          open={addBonusModalOpen}\n          onOpenChange={setAddBonusModalOpen}\n          huntId={selectedHuntId}\n          nextOrder={1} // This should be calculated based on existing bonuses\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":9463},"client/src/pages/hunt-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { ArrowLeft, Plus, Play, DollarSign, Settings, Edit, Calculator } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AddBonusModal } from \"@/components/add-bonus-modal\";\nimport { ProviderChart } from \"@/components/provider-chart\";\nimport { StartPlayingButton } from \"@/components/start-playing-button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useHunt } from \"@/hooks/use-hunts\";\nimport { useBonuses } from \"@/hooks/use-bonuses\";\n\nimport { formatCurrency } from \"@/lib/currency\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Currency } from \"@/lib/currency\";\nimport type { Bonus } from \"@shared/schema\";\n\nexport default function HuntDetailPage() {\n  const { id } = useParams<{ id: string }>();\n  const [addBonusModalOpen, setAddBonusModalOpen] = useState(false);\n  const [showEditBetModal, setShowEditBetModal] = useState(false);\n  const [showPayoutModal, setShowPayoutModal] = useState(false);\n  const [selectedBonus, setSelectedBonus] = useState<Bonus | null>(null);\n  const [editBetAmount, setEditBetAmount] = useState(\"\");\n  const [winAmount, setWinAmount] = useState(\"\");\n  \n  const { data: hunt, isLoading: huntLoading } = useHunt(id!);\n  const { data: bonuses, isLoading: bonusesLoading } = useBonuses(id!);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Edit bet amount mutation\n  const editBetMutation = useMutation({\n    mutationFn: async ({ bonusId, betAmount }: { bonusId: string; betAmount: string }) => {\n      const response = await fetch(`/api/bonuses/${bonusId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ betAmount }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Failed to update bet amount' }));\n        throw new Error(errorData.message || 'Failed to update bet amount');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/hunts/${id}/bonuses`] });\n      setShowEditBetModal(false);\n      setSelectedBonus(null);\n      setEditBetAmount(\"\");\n      toast({\n        title: \"Bet Amount Updated\",\n        description: \"Bonus bet amount has been updated\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update bet amount\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Payout mutation\n  const payoutMutation = useMutation({\n    mutationFn: async ({ bonusId, winAmount }: { bonusId: string; winAmount: number }) => {\n      const response = await fetch(`/api/bonuses/${bonusId}/payout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ winAmount }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Failed to record payout' }));\n        throw new Error(errorData.message || 'Failed to record payout');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/hunts/${id}/bonuses`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/hunts/${id}`] });\n      setShowPayoutModal(false);\n      setSelectedBonus(null);\n      setWinAmount(\"\");\n      toast({\n        title: \"Payout Recorded\",\n        description: \"Bonus payout and multiplier have been calculated\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to record payout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBonusClick = (bonus: Bonus) => {\n    if (hunt.isPlaying && !bonus.isPlayed) {\n      setSelectedBonus(bonus);\n      setWinAmount(\"\");\n      setShowPayoutModal(true);\n    }\n  };\n\n  const handlePayoutSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedBonus && winAmount) {\n      const amount = parseFloat(winAmount);\n      if (amount >= 0) {\n        payoutMutation.mutate({\n          bonusId: selectedBonus.id,\n          winAmount: amount,\n        });\n      }\n    }\n  };\n\n  const calculateMultiplier = () => {\n    if (selectedBonus && winAmount) {\n      const betAmount = Number(selectedBonus.betAmount);\n      const amount = parseFloat(winAmount);\n      return betAmount > 0 ? (amount / betAmount).toFixed(2) : \"0.00\";\n    }\n    return \"0.00\";\n  };\n\n  const handleEditBetSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedBonus && editBetAmount) {\n      editBetMutation.mutate({\n        bonusId: selectedBonus.id,\n        betAmount: editBetAmount,\n      });\n    }\n  };\n\n  if (huntLoading || bonusesLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"h-8 bg-gray-700 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"space-y-6\">\n              <div className=\"h-64 bg-gray-700 rounded\"></div>\n              <div className=\"h-48 bg-gray-700 rounded\"></div>\n            </div>\n            <div className=\"lg:col-span-2 space-y-6\">\n              <div className=\"h-48 bg-gray-700 rounded\"></div>\n              <div className=\"h-96 bg-gray-700 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hunt) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n          <CardContent className=\"p-12 text-center\">\n            <h3 className=\"text-xl font-semibold text-white mb-2\">Hunt not found</h3>\n            <p className=\"text-gray-400 mb-6\">The hunt you're looking for doesn't exist.</p>\n            <Link href=\"/\">\n              <Button>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Hunts\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const statusColors = {\n    collecting: \"bg-blue-500/20 text-blue-400 border-blue-500/30\",\n    opening: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n    finished: \"bg-green-500/20 text-green-400 border-green-500/30\",\n  };\n\n  const openedBonuses = bonuses?.filter(b => b.isPlayed) || [];\n  const totalBonuses = bonuses?.length || 0;\n  const progress = totalBonuses > 0 ? (openedBonuses.length / totalBonuses) * 100 : 0;\n  \n  const totalCost = bonuses?.reduce((sum, b) => sum + Number(b.betAmount), 0) || 0;\n  const totalWin = openedBonuses.reduce((sum, b) => sum + (Number(b.winAmount) || 0), 0);\n  const avgBet = totalBonuses > 0 ? totalCost / totalBonuses : 0;\n  const reqX = totalCost > 0 ? (totalCost * 100) / totalCost : 0;\n  const startBalance = Number(hunt.startBalance);\n  const roi = startBalance > 0 ? (totalWin / startBalance) * 100 : 0;\n\n  const bestWin = openedBonuses.reduce((best, current) => {\n    const currentWin = current.winAmount || 0;\n    const bestWin = best.winAmount || 0;\n    return currentWin > bestWin ? current : best;\n  }, openedBonuses[0] || null);\n\n  const bestMulti = openedBonuses.reduce((best, current) => {\n    const currentMulti = current.multiplier || 0;\n    const bestMulti = best.multiplier || 0;\n    return currentMulti > bestMulti ? current : best;\n  }, openedBonuses[0] || null);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-6\">\n        <Link href=\"/\">\n          <Button \n            variant=\"ghost\" \n            className=\"text-primary hover:text-primary/80 mb-4\"\n            data-testid=\"button-back-to-hunts\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Hunts\n          </Button>\n        </Link>\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-white\">{hunt.title}</h2>\n            <p className=\"text-gray-400\">{hunt.casino}</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge className={statusColors[hunt.status as keyof typeof statusColors]}>\n              {hunt.status}\n            </Badge>\n            <StartPlayingButton hunt={hunt} bonuses={bonuses || []} />\n            <Button \n              onClick={() => setAddBonusModalOpen(true)}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-add-bonus\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Bonus\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Hunt Info Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"bg-dark-purple/50 border-purple-800/30 mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Hunt Info</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Casino:</span>\n                <span className=\"text-white\">{hunt.casino}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Currency:</span>\n                <span className=\"text-white\">{hunt.currency}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Start Balance:</span>\n                <span className=\"text-green-400\">\n                  {formatCurrency(Number(hunt.startBalance), hunt.currency as Currency)}\n                </span>\n              </div>\n              {hunt.endBalance && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">End Balance:</span>\n                  <span className=\"text-green-400\">\n                    {formatCurrency(Number(hunt.endBalance), hunt.currency as Currency)}\n                  </span>\n                </div>\n              )}\n              <div className=\"pt-3 border-t border-purple-800/30\">\n\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Bonus Stats</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Total Bonuses:</span>\n                <span className=\"text-white\">{totalBonuses}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Avg. Bet:</span>\n                <span className=\"text-white\">\n                  {formatCurrency(avgBet, hunt.currency as Currency)}\n                </span>\n              </div>\n\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Total Win:</span>\n                <span className=\"text-green-400\">\n                  {formatCurrency(totalWin, hunt.currency as Currency)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">ROI:</span>\n                <span className={roi >= 0 ? \"text-green-400\" : \"text-red-400\"}>\n                  {roi >= 0 ? \"+\" : \"\"}{roi.toFixed(1)}%\n                </span>\n              </div>\n              \n              <div className=\"pt-3 border-t border-purple-800/30\">\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"text-gray-400\">Progress</span>\n                  <span className=\"text-white\">{openedBonuses.length}/{totalBonuses}</span>\n                </div>\n                <Progress value={progress} className=\"h-2\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-2\">\n          {/* Provider Distribution Chart */}\n          <Card className=\"bg-dark-purple/50 border-purple-800/30 mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Provider Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ProviderChart bonuses={bonuses || []} />\n            </CardContent>\n          </Card>\n\n          {/* Bonuses Table */}\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Bonus Slots</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {bonuses && bonuses.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"text-gray-400\">#</TableHead>\n                      <TableHead className=\"text-gray-400\">Slot</TableHead>\n                      <TableHead className=\"text-gray-400\">Provider</TableHead>\n                      <TableHead className=\"text-gray-400\">Bet</TableHead>\n                      <TableHead className=\"text-gray-400\">Multiplier</TableHead>\n                      <TableHead className=\"text-gray-400\">Win</TableHead>\n                      <TableHead className=\"text-gray-400\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {bonuses.map((bonus, index) => (\n                      <TableRow \n                        key={bonus.id} \n                        className={`hover:bg-white/5 ${bonus.isPlayed ? 'bg-green-900/20' : hunt.isPlaying && !bonus.isPlayed ? 'bg-blue-900/20 cursor-pointer' : 'bg-gray-900/20'}`}\n                        onClick={() => handleBonusClick(bonus)}\n                      >\n                        <TableCell className=\"text-gray-300\">{bonus.order}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center\">\n                            <div className=\"w-10 h-12 bg-gray-700 rounded overflow-hidden mr-3 flex-shrink-0\">\n                              {bonus.imageUrl ? (\n                                <img\n                                  src={bonus.imageUrl}\n                                  alt={bonus.slotName}\n                                  className=\"w-full h-full object-cover\"\n                                  data-testid={`img-slot-${bonus.id}`}\n                                  onError={(e) => {\n                                    const target = e.target as HTMLImageElement;\n                                    target.style.display = 'none';\n                                    target.nextElementSibling?.classList.remove('hidden');\n                                  }}\n                                />\n                              ) : null}\n                              <div className={`w-full h-full flex items-center justify-center text-gray-500 text-xs ${bonus.imageUrl ? 'hidden' : ''}`}>\n                                No image\n                              </div>\n                            </div>\n                            <span className=\"text-white text-sm\">{bonus.slotName}</span>\n                            {!bonus.isPlayed && hunt.isPlaying && (\n                              <Badge variant=\"outline\" className=\"ml-2 text-xs text-blue-400 border-blue-400\">\n                                CLICK TO RECORD PAYOUT\n                              </Badge>\n                            )}\n                            {bonus.isPlayed && (\n                              <Badge variant=\"outline\" className=\"ml-2 text-xs text-green-400 border-green-400\">\n                                PLAYED\n                              </Badge>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-gray-300\">{bonus.provider}</TableCell>\n                        <TableCell className=\"text-white\">\n                          {formatCurrency(Number(bonus.betAmount), hunt.currency as Currency)}\n                        </TableCell>\n                        <TableCell className=\"text-yellow-400\">\n                          {bonus.multiplier ? `${Number(bonus.multiplier).toFixed(2)}x` : '-'}\n                        </TableCell>\n                        <TableCell className=\"text-green-400\">\n                          {bonus.winAmount ? formatCurrency(Number(bonus.winAmount), hunt.currency as Currency) : '-'}\n                        </TableCell>\n                        <TableCell>\n                          {!hunt.isPlaying && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setSelectedBonus(bonus);\n                                setEditBetAmount(bonus.betAmount);\n                                setShowEditBetModal(true);\n                              }}\n                              className=\"text-blue-400 hover:text-blue-300 hover:bg-blue-900/20\"\n                              data-testid={`button-edit-bet-${bonus.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Play className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">No bonuses yet</h3>\n                  <p className=\"text-gray-400 mb-6\">Add your first bonus to start tracking!</p>\n                  <Button \n                    onClick={() => setAddBonusModalOpen(true)}\n                    className=\"bg-primary hover:bg-primary/90\"\n                    data-testid=\"button-add-first-bonus\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add First Bonus\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <AddBonusModal\n        open={addBonusModalOpen}\n        onOpenChange={setAddBonusModalOpen}\n        huntId={hunt.id}\n        nextOrder={(bonuses?.length || 0) + 1}\n      />\n\n      {/* Edit Bet Modal */}\n      {selectedBonus && (\n        <Dialog open={showEditBetModal} onOpenChange={setShowEditBetModal}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Edit className=\"w-5 h-5 text-blue-600\" />\n                Edit Bet Amount\n              </DialogTitle>\n              <DialogDescription>\n                Update the bet amount for {selectedBonus.slotName}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleEditBetSubmit} className=\"space-y-4\">\n              <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-3 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Slot:</span>\n                  <span className=\"font-medium\">{selectedBonus.slotName}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Provider:</span>\n                  <span className=\"font-medium\">{selectedBonus.provider}</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label htmlFor=\"editBetAmount\" className=\"text-white\">Bet Amount ({hunt.currency})</label>\n                <input\n                  id=\"editBetAmount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  placeholder=\"0.00\"\n                  value={editBetAmount}\n                  onChange={(e) => setEditBetAmount(e.target.value)}\n                  disabled={editBetMutation.isPending}\n                  data-testid=\"input-edit-bet-amount\"\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-black dark:text-white\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowEditBetModal(false)}\n                  disabled={editBetMutation.isPending}\n                  data-testid=\"button-cancel-edit-bet\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={!editBetAmount || editBetMutation.isPending}\n                  data-testid=\"button-update-bet\"\n                >\n                  {editBetMutation.isPending ? \"Updating...\" : \"Update Bet\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Payout Modal */}\n      <Dialog open={showPayoutModal} onOpenChange={setShowPayoutModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"w-5 h-5 text-green-600\" />\n              Record Payout\n            </DialogTitle>\n            <DialogDescription>\n              Enter the win amount for {selectedBonus?.slotName}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handlePayoutSubmit} className=\"space-y-4\">\n            {selectedBonus && (\n              <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-3 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Slot:</span>\n                  <span className=\"font-medium\">{selectedBonus.slotName}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Bet Amount:</span>\n                  <span className=\"font-medium\">${Number(selectedBonus.betAmount).toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Provider:</span>\n                  <span className=\"font-medium\">{selectedBonus.provider}</span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"winAmount\">Win Amount ($)</Label>\n              <Input\n                id=\"winAmount\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                placeholder=\"0.00\"\n                value={winAmount}\n                onChange={(e) => setWinAmount(e.target.value)}\n                disabled={payoutMutation.isPending}\n                data-testid=\"input-win-amount\"\n              />\n            </div>\n\n            {winAmount && (\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                <div className=\"flex items-center gap-2 text-blue-700 dark:text-blue-300\">\n                  <Calculator className=\"w-4 h-4\" />\n                  <span className=\"font-medium\">Calculated Multiplier: {calculateMultiplier()}x</span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowPayoutModal(false)}\n                disabled={payoutMutation.isPending}\n                data-testid=\"button-cancel-payout\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={!winAmount || payoutMutation.isPending}\n                data-testid=\"button-submit-payout\"\n              >\n                {payoutMutation.isPending ? \"Recording...\" : \"Record Payout\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25412},"client/src/pages/hunts.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Download, Plus, Trophy, Play, DollarSign, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { HuntCard } from \"@/components/hunt-card\";\nimport { CreateHuntModal } from \"@/components/create-hunt-modal\";\nimport { useHunts, useStats } from \"@/hooks/use-hunts\";\nimport { useBonuses } from \"@/hooks/use-bonuses\";\nimport { formatCurrency } from \"@/lib/currency\";\n\nexport default function HuntsPage() {\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const { data: hunts, isLoading: huntsLoading } = useHunts();\n  const { data: stats, isLoading: statsLoading } = useStats();\n\n  if (huntsLoading || statsLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"h-8 bg-gray-700 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-3xl font-bold text-white\">Your Bonus Hunts</h2>\n          <div className=\"flex space-x-3\">\n            <Button \n              variant=\"outline\" \n              className=\"bg-green-600 hover:bg-green-700 border-green-600\"\n              data-testid=\"button-export-hunts\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n            <Button \n              onClick={() => setCreateModalOpen(true)}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-create-hunt\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Hunt\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm font-medium\">Total Hunts</p>\n                  <p className=\"text-2xl font-bold text-white\" data-testid=\"text-total-hunts\">\n                    {stats?.totalHunts || 0}\n                  </p>\n                </div>\n                <div className=\"bg-primary/20 p-3 rounded-lg\">\n                  <Trophy className=\"text-primary text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm font-medium\">Active Hunts</p>\n                  <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-active-hunts\">\n                    {stats?.activeHunts || 0}\n                  </p>\n                </div>\n                <div className=\"bg-green-500/20 p-3 rounded-lg\">\n                  <Play className=\"text-green-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm font-medium\">Total Spent</p>\n                  <p className=\"text-2xl font-bold text-yellow-400\" data-testid=\"text-total-spent\">\n                    {formatCurrency(stats?.totalSpent || 0)}\n                  </p>\n                </div>\n                <div className=\"bg-yellow-500/20 p-3 rounded-lg\">\n                  <DollarSign className=\"text-yellow-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm font-medium\">Total Won</p>\n                  <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-total-won\">\n                    {formatCurrency(stats?.totalWon || 0)}\n                  </p>\n                </div>\n                <div className=\"bg-green-500/20 p-3 rounded-lg\">\n                  <TrendingUp className=\"text-green-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Hunts Grid */}\n        {hunts && hunts.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {hunts.map((hunt) => (\n              <HuntCard key={hunt.id} hunt={hunt} bonusCount={(hunt as any).bonusCount || 0} />\n            ))}\n          </div>\n        ) : (\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardContent className=\"p-12 text-center\">\n              <Trophy className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-white mb-2\">No hunts yet</h3>\n              <p className=\"text-gray-400 mb-6\">Create your first bonus hunt to get started!</p>\n              <Button \n                onClick={() => setCreateModalOpen(true)}\n                className=\"bg-primary hover:bg-primary/90\"\n                data-testid=\"button-create-first-hunt\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Hunt\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <CreateHuntModal\n        open={createModalOpen}\n        onOpenChange={setCreateModalOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":6323},"client/src/pages/latest-hunt.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, ExternalLink, Copy, Monitor } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport type { Hunt, Bonus } from \"@shared/schema\";\nimport type { Currency } from \"@/lib/currency\";\n\nexport default function LatestHuntPage() {\n  const [hunt, setHunt] = useState<Hunt | null>(null);\n  const [bonuses, setBonuses] = useState<Bonus[]>([]);\n  const [publicLinks, setPublicLinks] = useState<{\n    huntId: string;\n    publicLink: string;\n    obsOverlayLink: string;\n    title: string;\n    status: string;\n  } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const fetchLatestHunt = async () => {\n      try {\n        // Fetch latest hunt data\n        const huntResponse = await fetch('/api/latest-hunt');\n        if (huntResponse.ok) {\n          const huntData = await huntResponse.json();\n          setHunt(huntData.hunt);\n          setBonuses(huntData.bonuses);\n        }\n\n        // Fetch public links\n        const linksResponse = await fetch('/api/latest-hunt/public-link');\n        if (linksResponse.ok) {\n          const linksData = await linksResponse.json();\n          setPublicLinks(linksData);\n        }\n      } catch (error) {\n        console.error('Failed to fetch latest hunt:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchLatestHunt();\n\n    // Auto-refresh every 5 seconds for live updates\n    const interval = setInterval(fetchLatestHunt, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Success\",\n        description: \"Link copied to clipboard!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"h-8 bg-gray-700 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"space-y-6\">\n              <div className=\"h-64 bg-gray-700 rounded\"></div>\n              <div className=\"h-48 bg-gray-700 rounded\"></div>\n            </div>\n            <div className=\"lg:col-span-2 space-y-6\">\n              <div className=\"h-48 bg-gray-700 rounded\"></div>\n              <div className=\"h-96 bg-gray-700 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hunt) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n          <CardContent className=\"p-12 text-center\">\n            <h3 className=\"text-xl font-semibold text-white mb-2\">No active hunt</h3>\n            <p className=\"text-gray-400 mb-6\">Create a hunt to start tracking bonuses.</p>\n            <Link href=\"/admin\">\n              <Button className=\"bg-primary hover:bg-primary/90\">\n                Go to Admin Panel\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const statusColors = {\n    collecting: \"bg-blue-500/20 text-blue-400 border-blue-500/30\",\n    opening: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n    finished: \"bg-green-500/20 text-green-400 border-green-500/30\",\n  };\n\n  const openedBonuses = bonuses?.filter(b => b.isPlayed) || [];\n  const totalBonuses = bonuses?.length || 0;\n  const progress = totalBonuses > 0 ? (openedBonuses.length / totalBonuses) * 100 : 0;\n  \n  const totalCost = bonuses?.reduce((sum, b) => sum + Number(b.betAmount), 0) || 0;\n  const totalWin = openedBonuses.reduce((sum, b) => sum + (Number(b.winAmount) || 0), 0);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-white\">{hunt.title}</h1>\n              <div className=\"flex items-center space-x-3 mt-2\">\n                <Badge className={statusColors[hunt.status as keyof typeof statusColors]}>\n                  {hunt.status?.toUpperCase()}\n                </Badge>\n                <span className=\"text-gray-400\">•</span>\n                <span className=\"text-green-400\">Live Updates</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Live Links Section */}\n        {publicLinks && (\n          <Card className=\"bg-dark-purple/50 border-purple-800/30 mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">📡 Live Links</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Monitor className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <p className=\"text-white font-medium\">OBS Overlay</p>\n                    <p className=\"text-gray-400 text-sm\">For streaming</p>\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(publicLinks.obsOverlayLink)}\n                    data-testid=\"button-copy-obs-link\"\n                  >\n                    <Copy className=\"w-4 h-4 mr-2\" />\n                    Copy\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(publicLinks.obsOverlayLink, '_blank')}\n                    data-testid=\"button-open-obs-link\"\n                  >\n                    <Monitor className=\"w-4 h-4 mr-2\" />\n                    Open\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Hunt Info Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"bg-dark-purple/50 border-purple-800/30 mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Hunt Info</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Casino:</span>\n                <span className=\"text-white\">{hunt.casino}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Currency:</span>\n                <span className=\"text-white\">{hunt.currency}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Start Balance:</span>\n                <span className=\"text-green-400\">\n                  {formatCurrency(Number(hunt.startBalance), hunt.currency as Currency)}\n                </span>\n              </div>\n              {hunt.endBalance && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">End Balance:</span>\n                  <span className=\"text-green-400\">\n                    {formatCurrency(Number(hunt.endBalance), hunt.currency as Currency)}\n                  </span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Live Stats</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Total Bonuses:</span>\n                <span className=\"text-white\">{totalBonuses}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Total Cost:</span>\n                <span className=\"text-white\">\n                  {formatCurrency(totalCost, hunt.currency as Currency)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Total Win:</span>\n                <span className=\"text-green-400\">\n                  {formatCurrency(totalWin, hunt.currency as Currency)}\n                </span>\n              </div>\n              \n              <div className=\"pt-3 border-t border-purple-800/30\">\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"text-gray-400\">Progress</span>\n                  <span className=\"text-white\">{openedBonuses.length}/{totalBonuses}</span>\n                </div>\n                <Progress value={progress} className=\"h-2\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-2\">\n          {/* Bonuses Table */}\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-white\">Bonus Slots ({bonuses?.length || 0})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {bonuses && bonuses.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"border-purple-800/30\">\n                      <TableHead className=\"text-gray-400\">#</TableHead>\n                      <TableHead className=\"text-gray-400\">Slot</TableHead>\n                      <TableHead className=\"text-gray-400\">Provider</TableHead>\n                      <TableHead className=\"text-gray-400\">Bet</TableHead>\n                      <TableHead className=\"text-gray-400\">Win</TableHead>\n                      <TableHead className=\"text-gray-400\">Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {bonuses?.map((bonus) => (\n                      <TableRow key={bonus.id} className=\"border-purple-800/30 hover:bg-purple-900/20\">\n                        <TableCell className=\"text-white\">{bonus.order}</TableCell>\n                        <TableCell className=\"text-white font-medium\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-12 bg-gray-700 rounded overflow-hidden flex-shrink-0\">\n                              {bonus.imageUrl ? (\n                                <img\n                                  src={bonus.imageUrl}\n                                  alt={bonus.slotName}\n                                  className=\"w-full h-full object-cover\"\n                                  data-testid={`img-slot-${bonus.id}`}\n                                  onError={(e) => {\n                                    const target = e.target as HTMLImageElement;\n                                    target.style.display = 'none';\n                                    target.nextElementSibling?.classList.remove('hidden');\n                                  }}\n                                />\n                              ) : null}\n                              <div className={`w-full h-full flex items-center justify-center text-gray-500 text-xs ${bonus.imageUrl ? 'hidden' : ''}`}>\n                                No image\n                              </div>\n                            </div>\n                            <span>{bonus.slotName}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-gray-400\">{bonus.provider}</TableCell>\n                        <TableCell className=\"text-white\">\n                          {formatCurrency(Number(bonus.betAmount), hunt.currency as Currency)}\n                        </TableCell>\n                        <TableCell className=\"text-green-400\">\n                          {bonus.winAmount !== null && bonus.winAmount !== undefined \n                            ? formatCurrency(Number(bonus.winAmount), hunt.currency as Currency) \n                            : '-'\n                          }\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={bonus.status === 'opened' ? 'default' : 'secondary'}>\n                            {bonus.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">No bonuses yet</h3>\n                  <p className=\"text-gray-400\">Add bonuses to start tracking the hunt.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14095},"client/src/pages/live-obs-overlay.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport type { Currency } from \"@/lib/currency\";\n\nexport default function LiveOBSOverlay() {\n  const [data, setData] = useState<any>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/obs-overlay/latest');\n        const result = await response.json();\n        setData(result);\n      } catch (error) {\n        console.error('Error fetching OBS data:', error);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  if (!data?.hunt) {\n    return (\n      <div className=\"min-h-screen bg-transparent flex items-center justify-center\">\n        <div className=\"text-white text-2xl\">No active hunt</div>\n      </div>\n    );\n  }\n\n  const { hunt, bonuses } = data;\n  const openedBonuses = bonuses?.filter(b => b.isPlayed) || [];\n  const totalBonuses = bonuses?.length || 0;\n  const progress = totalBonuses > 0 ? (openedBonuses.length / totalBonuses) * 100 : 0;\n  \n  const totalWin = openedBonuses.reduce((sum: number, b: any) => sum + (Number(b.winAmount) || 0), 0);\n  const nextBonus = hunt.isPlaying ? bonuses?.find((b: any) => !b.isPlayed) : null;\n\n  // Find best win and best multiplier\n  const bestWin = openedBonuses.reduce((best: any, current: any) => {\n    const currentWin = Number(current.winAmount || 0);\n    const bestWin = Number(best?.winAmount || 0);\n    return currentWin > bestWin ? current : best;\n  }, openedBonuses[0] || null);\n\n  const bestMulti = openedBonuses.reduce((best: any, current: any) => {\n    const currentMulti = Number(current.multiplier || 0);\n    const bestMulti = Number(best?.multiplier || 0);\n    return currentMulti > bestMulti ? current : best;\n  }, openedBonuses[0] || null);\n\n  const bestWinAmount = bestWin ? Number(bestWin.winAmount || 0) : 0;\n  const bestMultiplier = bestMulti ? Number(bestMulti.multiplier || 0) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-transparent text-white p-8 overflow-hidden\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hunt Header */}\n        <div className=\"bg-black/80 backdrop-blur-sm rounded-lg p-6 mb-6 border border-purple-500/30\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-3xl font-bold text-purple-300\">{hunt.title}</h1>\n            <Badge className=\"bg-purple-600 text-white px-3 py-1\">\n              {hunt.status}\n            </Badge>\n          </div>\n          <div className=\"grid grid-cols-4 gap-6 text-center\">\n            <div>\n              <div className=\"text-3xl font-bold text-green-400\">\n                {formatCurrency(totalWin, hunt.currency as Currency)}\n              </div>\n              <div className=\"text-sm text-gray-400\">Total Win</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-yellow-400\">\n                {formatCurrency(bestWinAmount, hunt.currency as Currency)}\n              </div>\n              <div className=\"text-sm text-gray-400\">Best Win</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-orange-400\">\n                {bestMultiplier.toFixed(2)}x\n              </div>\n              <div className=\"text-sm text-gray-400\">Best Multi</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-purple-400\">\n                {openedBonuses.length}/{totalBonuses}\n              </div>\n              <div className=\"text-sm text-gray-400\">Bonuses Played</div>\n            </div>\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"mt-4\">\n            <div className=\"w-full bg-gray-700 rounded-full h-3\">\n              <div \n                className=\"bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-500\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Next Bonus Highlight */}\n        {nextBonus && (\n          <div className=\"bg-yellow-500/20 backdrop-blur-sm rounded-lg p-4 mb-6 border border-yellow-500/50 animate-pulse\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-yellow-400 font-bold text-lg\">NEXT:</div>\n              <div className=\"w-12 h-16 bg-gray-700 rounded overflow-hidden flex-shrink-0\">\n                {nextBonus.imageUrl ? (\n                  <img\n                    src={nextBonus.imageUrl}\n                    alt={nextBonus.slotName}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center text-gray-500 text-xs\">\n                    No image\n                  </div>\n                )}\n              </div>\n              <div>\n                <div className=\"text-white font-semibold\">{nextBonus.slotName}</div>\n                <div className=\"text-gray-400\">{nextBonus.provider}</div>\n                <div className=\"text-green-400\">{formatCurrency(Number(nextBonus.betAmount), hunt.currency as Currency)}</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Vertical Scrolling Bonuses - 4 slots visible, full width horizontal */}\n        {bonuses && bonuses.length > 0 && (\n          <div className=\"bg-black/80 backdrop-blur-sm rounded-lg p-6 border border-purple-500/30\">\n            <h2 className=\"text-xl font-bold text-purple-300 mb-4\">Slots in Hunt</h2>\n            \n            {/* Column Headers */}\n            <div className=\"grid grid-cols-6 gap-4 mb-4 px-4 py-2 bg-gray-800/50 rounded-lg\">\n              <div className=\"text-center text-gray-300 text-sm font-medium\">#</div>\n              <div className=\"text-left text-gray-300 text-sm font-medium\">Slot</div>\n              <div className=\"text-center text-gray-300 text-sm font-medium\">Bet Size</div>\n              <div className=\"text-center text-gray-300 text-sm font-medium\">Multiplier</div>\n              <div className=\"text-center text-gray-300 text-sm font-medium\">Payout</div>\n              <div className=\"text-center text-gray-300 text-sm font-medium\">Status</div>\n            </div>\n\n            <div className=\"relative overflow-hidden h-96\">\n              <div \n                className={`space-y-6 ${bonuses.length > 1 ? 'animate-scroll' : ''}`}\n              >\n                {/* Duplicate bonuses for seamless scrolling */}\n                {[...bonuses, ...bonuses].map((bonus: any, index: number) => (\n                  <div \n                    key={`${bonus.id}-${index}`}\n                    className={`w-full rounded-lg border-2 transition-all ${\n                      bonus.isPlayed \n                        ? 'bg-green-900/30 border-green-500' \n                        : bonus === nextBonus \n                          ? 'bg-yellow-900/30 border-yellow-500 animate-pulse' \n                          : 'bg-gray-900/30 border-gray-700'\n                    }`}\n                  >\n                    <div className=\"grid grid-cols-6 gap-4 items-center p-6 h-24\">\n                      {/* Slot Number */}\n                      <div className={`text-center text-2xl font-bold ${\n                        bonus.isPlayed ? 'text-green-400' : \n                        bonus === nextBonus ? 'text-yellow-400' : 'text-gray-400'\n                      }`}>\n                        #{bonus.order}\n                      </div>\n                      \n                      {/* Slot Info with Image */}\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-14 h-14 bg-gray-700 rounded overflow-hidden flex-shrink-0\">\n                          {bonus.imageUrl ? (\n                            <img\n                              src={bonus.imageUrl}\n                              alt={bonus.slotName}\n                              className=\"w-full h-full object-contain\"\n                            />\n                          ) : (\n                            <div className=\"w-full h-full flex items-center justify-center text-gray-500 text-xs\">\n                              No image\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"min-w-0 flex-1\">\n                          <div className=\"text-white font-medium text-lg truncate\">{bonus.slotName}</div>\n                          <div className=\"text-gray-400 text-sm truncate\">{bonus.provider}</div>\n                        </div>\n                      </div>\n                      \n                      {/* Bet Size */}\n                      <div className=\"text-center text-green-400 text-xl font-mono\">\n                        {formatCurrency(Number(bonus.betAmount), hunt.currency as Currency)}\n                      </div>\n                      \n                      {/* Multiplier */}\n                      <div className=\"text-center text-yellow-400 text-xl font-bold\">\n                        {bonus.isPlayed ? `${Number(bonus.multiplier || 0).toFixed(2)}x` : '-'}\n                      </div>\n                      \n                      {/* Payout */}\n                      <div className=\"text-center text-white text-xl font-bold\">\n                        {bonus.isPlayed ? formatCurrency(Number(bonus.winAmount || 0), hunt.currency as Currency) : '-'}\n                      </div>\n                      \n                      {/* Status */}\n                      <div className=\"text-center\">\n                        {bonus.isPlayed ? (\n                          <span className=\"text-green-400 text-lg font-medium\">PLAYED</span>\n                        ) : bonus === nextBonus ? (\n                          <span className=\"text-yellow-400 text-lg font-medium animate-pulse\">NEXT</span>\n                        ) : (\n                          <span className=\"text-gray-500 text-lg\">WAITING</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n        \n\n      </div>\n\n\n    </div>\n  );\n}","size_bytes":10307},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/obs-overlay.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport type { Hunt, Bonus } from \"@shared/schema\";\nimport type { Currency } from \"@/lib/currency\";\n\nexport default function OBSOverlayPage() {\n  const [location] = useLocation();\n  const [hunt, setHunt] = useState<Hunt | null>(null);\n  const [bonuses, setBonuses] = useState<Bonus[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Get hunt ID from URL parameters\n  const urlParams = new URLSearchParams(window.location.search);\n  const huntId = urlParams.get('id');\n  const isV2 = location.includes('v2');\n\n  useEffect(() => {\n    const fetchHuntData = async () => {\n      try {\n        let huntResponse, bonusesResponse;\n        \n        if (location.includes('/obs-overlay/latest')) {\n          // For latest hunt overlay, use the new API endpoint\n          const response = await fetch('/obs-overlay/latest');\n          if (response.ok) {\n            const data = await response.json();\n            setHunt(data.hunt);\n            setBonuses(data.bonuses);\n          }\n        } else if (huntId) {\n          // For specific hunt ID\n          [huntResponse, bonusesResponse] = await Promise.all([\n            fetch(`/api/hunts/${huntId}`),\n            fetch(`/api/hunts/${huntId}/bonuses`),\n          ]);\n\n          if (huntResponse.ok && bonusesResponse.ok) {\n            setHunt(await huntResponse.json());\n            setBonuses(await bonusesResponse.json());\n          }\n        } else {\n          // Fallback to latest hunt\n          const response = await fetch('/obs-overlay/latest');\n          if (response.ok) {\n            const data = await response.json();\n            setHunt(data.hunt);\n            setBonuses(data.bonuses);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch hunt data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchHuntData();\n\n    // Auto-refresh every 5 seconds for live updates\n    const interval = setInterval(fetchHuntData, 5000);\n    return () => clearInterval(interval);\n  }, [huntId, location]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-transparent flex items-center justify-center\">\n        <div className=\"animate-pulse text-white\">Loading overlay...</div>\n      </div>\n    );\n  }\n\n  if (!hunt) {\n    return (\n      <div className=\"min-h-screen bg-transparent flex items-center justify-center\">\n        <div className=\"text-white text-center\">\n          <h2 className=\"text-xl font-bold mb-2\">Hunt Not Found</h2>\n          <p className=\"text-gray-400\">Please check the hunt ID in the URL</p>\n        </div>\n      </div>\n    );\n  }\n\n  const openedBonuses = bonuses.filter(b => b.isPlayed);\n  const totalBonuses = bonuses.length;\n  const progress = totalBonuses > 0 ? (openedBonuses.length / totalBonuses) * 100 : 0;\n  \n  const totalCost = bonuses.reduce((sum, b) => sum + Number(b.betAmount), 0);\n  const totalWin = openedBonuses.reduce((sum, b) => sum + Number(b.winAmount || 0), 0);\n  const avgMultiplier = openedBonuses.length > 0 \n    ? openedBonuses.reduce((sum, b) => sum + Number(b.multiplier || 0), 0) / openedBonuses.length \n    : 0;\n  const bex = totalCost > 0 ? totalCost / (totalBonuses > 0 ? totalBonuses : 1) : 0;\n  const target = totalCost * 1.6; // Assuming 1.6x as break-even target\n\n  const bestWin = openedBonuses.reduce((best, current) => {\n    const currentWin = Number(current.winAmount || 0);\n    const bestWin = Number(best?.winAmount || 0);\n    return currentWin > bestWin ? current : best;\n  }, openedBonuses[0] || null);\n\n  const bestMulti = openedBonuses.reduce((best, current) => {\n    const currentMulti = Number(current.multiplier || 0);\n    const bestMulti = Number(best?.multiplier || 0);\n    return currentMulti > bestMulti ? current : best;\n  }, openedBonuses[0] || null);\n\n  const bestWinAmount = bestWin ? Number(bestWin.winAmount || 0) : 0;\n  const bestMultiplier = bestMulti ? Number(bestMulti.multiplier || 0) : 0;\n\n  if (isV2) {\n    return (\n      <div className=\"min-h-screen bg-transparent p-8\">\n        <div className=\"bg-dark-purple/90 border border-purple-800/50 rounded-xl p-8 max-w-4xl mx-auto backdrop-blur-sm\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-white bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              BONUSHUNT INFO\n            </h3>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-dark-purple rounded-lg px-4 py-2\">\n                <span className=\"text-gray-400 text-sm\">Progress:</span>\n                <span className=\"text-white ml-2\">{openedBonuses.length}/{totalBonuses}</span>\n              </div>\n              <div className=\"w-32 bg-dark-purple rounded-full h-3\">\n                <div \n                  className=\"bg-gradient-to-r from-primary to-secondary h-3 rounded-full transition-all duration-500\"\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n              <span className=\"text-white font-semibold\">{progress.toFixed(0)}%</span>\n            </div>\n          </div>\n\n          {/* Stats Tiles */}\n          <div className=\"grid grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-gradient-to-br from-blue-600/20 to-blue-800/20 border border-blue-500/30 rounded-lg p-4 text-center\">\n              <div className=\"text-blue-400 text-sm font-medium mb-1\">B.E.X</div>\n              <div className=\"text-white text-xl font-bold\">{bex.toFixed(2)}</div>\n            </div>\n            <div className=\"bg-gradient-to-br from-green-600/20 to-green-800/20 border border-green-500/30 rounded-lg p-4 text-center\">\n              <div className=\"text-green-400 text-sm font-medium mb-1\">TARGET</div>\n              <div className=\"text-white text-xl font-bold\">\n                {formatCurrency(target, hunt.currency as Currency)}\n              </div>\n            </div>\n            <div className=\"bg-gradient-to-br from-yellow-600/20 to-yellow-800/20 border border-yellow-500/30 rounded-lg p-4 text-center\">\n              <div className=\"text-yellow-400 text-sm font-medium mb-1\">BEST WIN</div>\n              <div className=\"text-white text-xl font-bold\">\n                {formatCurrency(bestWinAmount, hunt.currency as Currency)}\n              </div>\n            </div>\n            <div className=\"bg-gradient-to-br from-purple-600/20 to-purple-800/20 border border-purple-500/30 rounded-lg p-4 text-center\">\n              <div className=\"text-purple-400 text-sm font-medium mb-1\">BEST MULTI</div>\n              <div className=\"text-white text-xl font-bold\">{bestMultiplier.toFixed(2)}x</div>\n            </div>\n          </div>\n\n          {/* Best Win & Multi Row */}\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            <div className=\"bg-gradient-to-r from-green-600/20 to-emerald-600/20 border border-green-500/30 rounded-lg p-4\">\n              <div className=\"text-green-400 text-sm font-medium mb-1\">BEST WIN</div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-white text-lg font-bold\">\n                  {bestWin ? formatCurrency(bestWin.winAmount || 0, hunt.currency as Currency) : '-'}\n                </span>\n                <span className=\"text-gray-400 text-sm\">\n                  {bestWin ? bestWin.slotName : 'None'}\n                </span>\n              </div>\n            </div>\n            <div className=\"bg-gradient-to-r from-yellow-600/20 to-orange-600/20 border border-yellow-500/30 rounded-lg p-4\">\n              <div className=\"text-yellow-400 text-sm font-medium mb-1\">BEST MULTI</div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-white text-lg font-bold\">\n                  {bestMulti ? `${bestMulti.multiplier}x` : '-'}\n                </span>\n                <span className=\"text-gray-400 text-sm\">\n                  {bestMulti ? bestMulti.slotName : 'None'}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Slots Table */}\n          <div className=\"bg-dark-purple/50 border border-purple-800/30 rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"text-gray-400 text-xs uppercase\">#</TableHead>\n                  <TableHead className=\"text-gray-400 text-xs uppercase\">SLOT</TableHead>\n                  <TableHead className=\"text-gray-400 text-xs uppercase\">BET</TableHead>\n                  <TableHead className=\"text-gray-400 text-xs uppercase\">MULTI</TableHead>\n                  <TableHead className=\"text-gray-400 text-xs uppercase\">WIN</TableHead>\n                  <TableHead className=\"text-gray-400 text-xs uppercase\">STATUS</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {bonuses.map((bonus) => (\n                  <TableRow \n                    key={bonus.id}\n                    className={`hover:bg-white/5 transition-colors ${\n                      bonus.isPlayed ? 'bg-green-500/20' : 'bg-gray-500/20'\n                    }`}\n                  >\n                    <TableCell className=\"text-gray-300 text-sm py-4\">{bonus.order}</TableCell>\n                    <TableCell className=\"text-white text-sm font-medium py-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        {bonus.imageUrl && (\n                          <img \n                            src={bonus.imageUrl} \n                            alt={bonus.slotName}\n                            className=\"w-10 h-10 rounded object-cover flex-shrink-0\"\n                          />\n                        )}\n                        <span className=\"font-semibold\">{bonus.slotName}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-white text-sm py-4 font-semibold\">\n                      {formatCurrency(Number(bonus.betAmount), hunt.currency as Currency)}\n                    </TableCell>\n                    <TableCell className=\"text-yellow-400 text-sm py-4 font-semibold\">\n                      {bonus.multiplier ? `${Number(bonus.multiplier).toFixed(2)}x` : '-'}\n                    </TableCell>\n                    <TableCell className=\"text-green-400 text-sm py-4 font-semibold\">\n                      {bonus.winAmount ? formatCurrency(Number(bonus.winAmount), hunt.currency as Currency) : '-'}\n                    </TableCell>\n                    <TableCell className=\"text-sm py-4\">\n                      <span className={`px-3 py-2 rounded-md text-xs font-medium ${\n                        bonus.isPlayed ? 'bg-green-500/20 text-green-400' : 'bg-gray-500/20 text-gray-400'\n                      }`}>\n                        {bonus.isPlayed ? 'Played' : 'Pending'}\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Simple overlay version\n  return (\n    <div className=\"min-h-screen bg-transparent p-4\">\n      <Card className=\"bg-dark-purple/90 border-purple-800/50 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-white text-center\">{hunt.title}</CardTitle>\n          <div className=\"text-center\">\n            <Progress value={progress} className=\"w-full h-2 mb-2\" />\n            <span className=\"text-gray-400 text-sm\">{openedBonuses.length}/{totalBonuses} bonuses opened</span>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center mb-4\">\n            <div className=\"text-gray-400 text-sm\">Total Win</div>\n            <div className=\"text-green-400 font-bold\">\n              {formatCurrency(totalWin, hunt.currency as Currency)}\n            </div>\n          </div>\n\n          {/* Slots List */}\n          <div className=\"space-y-3 mb-4\">\n            <div className=\"text-gray-300 text-lg font-semibold text-center\">Slots in Hunt</div>\n            \n            {/* Column Headers */}\n            <div className=\"grid grid-cols-4 gap-2 px-3 py-2 bg-gray-800/50 rounded text-xs font-medium text-gray-400\">\n              <div>Slot Name</div>\n              <div className=\"text-center\">Bet Size</div>\n              <div className=\"text-center\">Payout</div>\n              <div className=\"text-center\">Status</div>\n            </div>\n            \n            {/* Scrollable Slots */}\n            <div className=\"max-h-60 overflow-y-auto scrolling-slots space-y-2\">\n              {bonuses.map((bonus, index) => (\n                <div \n                  key={bonus.id} \n                  className={`grid grid-cols-4 gap-2 items-center p-3 rounded-lg border transition-all duration-300 ${\n                    bonus.isPlayed \n                      ? 'bg-green-500/20 border-green-500/30 text-green-400' \n                      : 'bg-gray-500/20 border-gray-500/30 text-gray-300'\n                  }`}\n                  style={{ animationDelay: `${index * 0.1}s` }}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    {bonus.imageUrl && (\n                      <img \n                        src={bonus.imageUrl} \n                        alt={bonus.slotName}\n                        className=\"w-8 h-8 rounded object-cover flex-shrink-0\"\n                      />\n                    )}\n                    <span className=\"text-sm font-medium truncate\">{bonus.slotName}</span>\n                  </div>\n                  \n                  <div className=\"text-center text-sm font-semibold\">\n                    {formatCurrency(Number(bonus.betAmount), hunt.currency as Currency)}\n                  </div>\n                  \n                  <div className=\"text-center text-sm font-semibold\">\n                    {bonus.isPlayed && bonus.winAmount \n                      ? formatCurrency(Number(bonus.winAmount), hunt.currency as Currency)\n                      : '-'\n                    }\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <span className={`px-2 py-1 rounded text-xs font-medium ${\n                      bonus.isPlayed \n                        ? 'bg-green-500/30 text-green-300' \n                        : 'bg-gray-500/30 text-gray-400'\n                    }`}>\n                      {bonus.isPlayed ? 'Played' : 'Pending'}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {bestWin && (\n            <div className=\"text-center border-t border-purple-800/30 pt-4\">\n              <div className=\"text-gray-400 text-sm\">Best Win</div>\n              <div className=\"text-yellow-400 font-bold\">\n                {formatCurrency(Number(bestWin.winAmount || 0), hunt.currency as Currency)}\n              </div>\n              <div className=\"text-gray-400 text-xs\">{bestWin.slotName}</div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":15522},"client/src/pages/public-hunt.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ProviderChart } from \"@/components/provider-chart\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport type { Hunt, Bonus } from \"@shared/schema\";\nimport type { Currency } from \"@/lib/currency\";\n\nexport default function PublicHuntPage() {\n  const { token } = useParams<{ token: string }>();\n  const [hunt, setHunt] = useState<Hunt | null>(null);\n  const [bonuses, setBonuses] = useState<Bonus[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!token) {\n      setIsLoading(false);\n      return;\n    }\n\n    const fetchPublicHunt = async () => {\n      try {\n        const response = await fetch(`/api/public/hunts/${token}`);\n        if (response.ok) {\n          const data = await response.json();\n          setHunt(data.hunt);\n          setBonuses(data.bonuses);\n        }\n      } catch (error) {\n        console.error('Failed to fetch public hunt:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPublicHunt();\n\n    // Auto-refresh every 10 seconds for live updates\n    const interval = setInterval(fetchPublicHunt, 10000);\n    return () => clearInterval(interval);\n  }, [token]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-dark text-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-gray-700 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"space-y-6\">\n                <div className=\"h-64 bg-gray-700 rounded\"></div>\n                <div className=\"h-48 bg-gray-700 rounded\"></div>\n              </div>\n              <div className=\"lg:col-span-2 space-y-6\">\n                <div className=\"h-48 bg-gray-700 rounded\"></div>\n                <div className=\"h-96 bg-gray-700 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hunt) {\n    return (\n      <div className=\"min-h-screen bg-dark text-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n            <CardContent className=\"p-12 text-center\">\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Hunt not found</h3>\n              <p className=\"text-gray-400\">This hunt is either private or doesn't exist.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const statusColors = {\n    collecting: \"bg-blue-500/20 text-blue-400 border-blue-500/30\",\n    opening: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n    finished: \"bg-green-500/20 text-green-400 border-green-500/30\",\n  };\n\n  const openedBonuses = bonuses.filter(b => b.status === 'opened');\n  const totalBonuses = bonuses.length;\n  const progress = totalBonuses > 0 ? (openedBonuses.length / totalBonuses) * 100 : 0;\n  \n  const totalCost = bonuses.reduce((sum, b) => sum + b.betAmount, 0);\n  const totalWin = openedBonuses.reduce((sum, b) => sum + (b.winAmount || 0), 0);\n  const avgBet = totalBonuses > 0 ? totalCost / totalBonuses : 0;\n  const roi = totalCost > 0 ? ((totalWin - totalCost) / totalCost) * 100 : 0;\n\n  return (\n    <div className=\"min-h-screen bg-dark text-gray-100\">\n      {/* Header */}\n      <header className=\"bg-dark-purple/80 backdrop-blur-sm border-b border-purple-800/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                🎰 Public Bonus Hunt\n              </h1>\n            </div>\n            <div className=\"text-sm text-gray-400\">\n              Live Hunt View\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-white\">{hunt.title}</h2>\n              <p className=\"text-gray-400\">{hunt.casino}</p>\n            </div>\n            <Badge className={statusColors[hunt.status as keyof typeof statusColors]}>\n              {hunt.status}\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Hunt Info Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-dark-purple/50 border-purple-800/30 mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-white\">Hunt Info</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Casino:</span>\n                  <span className=\"text-white\">{hunt.casino}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Currency:</span>\n                  <span className=\"text-white\">{hunt.currency}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Start Balance:</span>\n                  <span className=\"text-green-400\">\n                    {formatCurrency(hunt.startBalance, hunt.currency as Currency)}\n                  </span>\n                </div>\n                {hunt.endBalance && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">End Balance:</span>\n                    <span className=\"text-green-400\">\n                      {formatCurrency(hunt.endBalance, hunt.currency as Currency)}\n                    </span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Created:</span>\n                  <span className=\"text-white\">\n                    {new Date(hunt.createdAt * 1000).toLocaleDateString()}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-white\">Bonus Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Total Bonuses:</span>\n                  <span className=\"text-white\">{totalBonuses}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Avg. Bet:</span>\n                  <span className=\"text-white\">\n                    {formatCurrency(avgBet, hunt.currency as Currency)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Total Cost:</span>\n                  <span className=\"text-white\">\n                    {formatCurrency(totalCost, hunt.currency as Currency)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Total Win:</span>\n                  <span className=\"text-green-400\">\n                    {formatCurrency(totalWin, hunt.currency as Currency)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">ROI:</span>\n                  <span className={roi >= 0 ? \"text-green-400\" : \"text-red-400\"}>\n                    {roi >= 0 ? \"+\" : \"\"}{roi.toFixed(1)}%\n                  </span>\n                </div>\n                \n                <div className=\"pt-3 border-t border-purple-800/30\">\n                  <div className=\"flex justify-between text-sm mb-2\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-white\">{openedBonuses.length}/{totalBonuses}</span>\n                  </div>\n                  <Progress value={progress} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            {/* Provider Distribution Chart */}\n            <Card className=\"bg-dark-purple/50 border-purple-800/30 mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-white\">Provider Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ProviderChart bonuses={bonuses} />\n              </CardContent>\n            </Card>\n\n            {/* Bonuses Table */}\n            <Card className=\"bg-dark-purple/50 border-purple-800/30\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-white\">Bonus Slots</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {bonuses.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"text-gray-400\">#</TableHead>\n                        <TableHead className=\"text-gray-400\">Slot</TableHead>\n                        <TableHead className=\"text-gray-400\">Provider</TableHead>\n                        <TableHead className=\"text-gray-400\">Bet</TableHead>\n                        <TableHead className=\"text-gray-400\">Multiplier</TableHead>\n                        <TableHead className=\"text-gray-400\">Win</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {bonuses.map((bonus) => (\n                        <TableRow \n                          key={bonus.id} \n                          className={`hover:bg-white/5 ${bonus.status === 'opened' ? '' : 'bg-primary/10'}`}\n                        >\n                          <TableCell className=\"text-gray-300\">{bonus.order}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              {bonus.imageUrl && (\n                                <img\n                                  src={bonus.imageUrl}\n                                  alt={bonus.slotName}\n                                  className=\"w-8 h-10 rounded mr-3\"\n                                />\n                              )}\n                              <span className=\"text-white text-sm\">{bonus.slotName}</span>\n                              {bonus.status === 'waiting' && (\n                                <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                                  WAITING\n                                </Badge>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-gray-300\">{bonus.provider}</TableCell>\n                          <TableCell className=\"text-white\">\n                            {formatCurrency(bonus.betAmount, hunt.currency as Currency)}\n                          </TableCell>\n                          <TableCell className=\"text-yellow-400\">\n                            {bonus.multiplier ? `${bonus.multiplier}x` : '-'}\n                          </TableCell>\n                          <TableCell className=\"text-green-400\">\n                            {bonus.winAmount ? formatCurrency(bonus.winAmount, hunt.currency as Currency) : '-'}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <h3 className=\"text-xl font-semibold text-white mb-2\">No bonuses yet</h3>\n                    <p className=\"text-gray-400\">The hunt hasn't started collecting bonuses.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12814},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}